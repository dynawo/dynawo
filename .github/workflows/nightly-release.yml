name: Nightly Release

on:
  workflow_dispatch:
  schedule:
    - cron:  "0 22 * * 1-5"

jobs:
  fedora:
    name: Linux Fedora (Release, GCC, cxx11)
    runs-on: ubuntu-latest
    container: dynawo/dynawo-distribution-cxx11:latest
    strategy:
      fail-fast: false
    env:
      DYNAWO_INSTALL_OPENMODELICA: /opt/OpenModelica/Install
      DYNAWO_SRC_OPENMODELICA: /opt/OpenModelica/Source
      DYNAWO_RESULTS_SHOW: "false"
      DYNAWO_BUILD_TYPE: Release
      DYNAWO_FORCE_CXX11_ABI: "true"
      DYNAWO_NB_PROCESSORS_USED: 2
      GH_API: ${{ github.api_url }}/repos/${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CURL_JSON: 'curl --silent -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" --header "Content-Type: application/json"'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawo.sh build-user

      - name: Build documentation
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawo.sh build-doc

      - name: Prepare files for distribution
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawo.sh distrib
          util/envDynawo.sh distrib-omc
          util/envDynawo.sh distrib-headers

      - name: INFO. Files created in distributions folder
        run: du -hs distributions/*

      - name: Delete previous nightly release
        run: |
          source .github/workflows/tools.sh

          echo "Obtain previous release id and delete it"
          RELEASE_ID=$(eval $CURL_JSON "$GH_API/releases" | python3 -c 'import sys, json; releases=[release["id"] for release in json.load(sys.stdin) if release["tag_name"]=="nightly"]; print(releases[0] if releases else "")')
          if [ ! -z "$RELEASE_ID" ]; then
            echo "Release id with tag 'nightly' found: $RELEASE_ID"
            echo "Delete release $RELEASE_ID ..."
            curl \
              --request DELETE \
              --url "$GH_API/releases/$RELEASE_ID" \
              --header "authorization: Bearer $GITHUB_TOKEN"
            echo "Wait for release to be deleted ..."
            wait_for_http_code "$GH_API/releases/$RELEASE_ID" 404 $GITHUB_TOKEN
          else
            echo "Previous nightly release not found"
          fi

      - name: INFO. List of all releases after deleting nightly
        run: eval $CURL_JSON "$GH_API/releases"

      - name: Delete previous nightly tag
        run: |
          source .github/workflows/tools.sh

          echo "Delete previous tag. Won't fail if it does not exist"
          curl \
            --request DELETE \
            --url "$GH_API/git/refs/tags/nightly" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json"

          echo "Wait for tag to be deleted ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly" 404 $GITHUB_TOKEN

      - name: INFO. Nightly tag should not be found
        run: eval $CURL_JSON "$GH_API/git/refs/tags/nightly"

      - name: Get last commit in master
        run: |
          echo "Obtaining refs/heads/master ..."
          HEAD_MASTER=$(eval $CURL_JSON "$GH_API/git/refs/heads/master")
          echo "Head master:"
          echo $HEAD_MASTER
          SHA_HEAD_MASTER=$(echo $HEAD_MASTER | python3 -c 'import sys, json; print(json.load(sys.stdin)["object"]["sha"])')
          echo "Last commit in master has SHA = $SHA_HEAD_MASTER"
          echo "MASTER_COMMIT_ID=$SHA_HEAD_MASTER" >> $GITHUB_ENV

      - name: INFO. Check last commit in master
        run: echo "Last commit in master SHA = $MASTER_COMMIT_ID"

      - name: Create tag nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create tag nightly based on last commit in master branch"
          curl \
            --request POST \
            --url "$GH_API/git/refs" \
            --header "authorization: Bearer $GITHUB_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{
                "ref": "refs/tags/nightly",
                "sha": "'$MASTER_COMMIT_ID'"
                }'
          echo "Wait for tag to be created ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly" 200 $GITHUB_TOKEN

      - name: INFO. Tag nightly created"
        run: eval $CURL_JSON "$GH_API/git/refs/tags/nightly"

      - name: Create release nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create release nightly"
          curl \
            --request POST \
            --url "$GH_API/releases" \
            --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{
                "tag_name" : "nightly",
                "target_commitish" : "'$MASTER_COMMIT_ID'",
                "name" : "Nightly",
                "body" : "Dynawo'"'"'s nightly release. Compiled on *release* settings.\n\n**Don'"'"'t use it for production**",
                "draft" : false,
                "prerelease" : true
                }'
          echo "Wait for the release to be published ..."
          wait_for_http_code "$GH_API/releases/tags/nightly" 200 $GITHUB_TOKEN

      - name: INFO. Release object created for tag nightly"
        run: eval $CURL_JSON "$GH_API/releases/tags/nightly"

      - name: Upload assets for release
        run: |
          source .github/workflows/tools.sh
          echo "Obtain upload and assets urls from created release:"
          RELEASE=$(eval $CURL_JSON "$GH_API/releases/tags/nightly")
          UPLOAD_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["upload_url"]))' | grep -o ".*assets")
          echo "Release upload URL = $UPLOAD_URL"
          ASSETS_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["assets_url"]))')
          echo "Release assets URL = $ASSETS_URL"
          echo "ASSETS_URL=$ASSETS_URL" >> $GITHUB_ENV

          echo "Upload assets"
          pushd distributions
          for FILE in *zip; do
            [ -f "$FILE" ] || break
            echo "Upload asset $FILE"
            upload_zip_file $UPLOAD_URL $FILE ${{ secrets.GITHUB_TOKEN }}
          done
          popd

          pushd documentation/dynawoDocumentation
          upload_pdf_file $UPLOAD_URL DynawoDocumentation.pdf ${{ secrets.GITHUB_TOKEN }}
          popd

      - name: INFO. Release assets
        run: eval $CURL_JSON $ASSETS_URL

  windows:
    name: Windows 2019 (Release, VS2019)
    runs-on: windows-2019
    needs: fedora
    steps:
      - name: Install tools
        shell: cmd
        run: choco install wget curl jq --no-progress

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Git move
        shell: cmd
        run: |
          cd ..
          move dynawo \
          md dynawo

      - name: Install OpenModelica
        shell: cmd
        env:
          VERSION: v1.4.1
        run: |
          cd \
          set url=https://github.com/dynawo/dynawo/releases/download/%VERSION%/Dynawo_Windows_%VERSION%.zip
          wget -nv %url%
          7z x Dynawo_Windows_%VERSION%.zip dynawo\OpenModelica\ -r -oOpenModelica
          cd OpenModelica\dynawo
          7z a OpenModelica.zip -r OpenModelica\*

      # We are forced to change the path to avoid too long commands when compiling
      - name: Build Dynawo Third Parties
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd \dynawo
          set PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x64;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\VC\VCPackages;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\Roslyn;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Team Tools\Performance Tools\x64;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Team Tools\Performance Tools;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Common\VSPerfCollectionTools\vs2019\\x64;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Common\VSPerfCollectionTools\vs2019\;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\;C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64;C:\Program Files (x86)\Windows Kits\10\bin\x64;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\\MSBuild\Current\Bin;C:\Windows\Microsoft.NET\Framework64\v4.0.30319;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\;C:\vcpkg;C:\Program Files (x86)\GitHub CLI;C:\Program Files\Git\bin;C:\hostedtoolcache\windows\Python\3.7.9\x64\Scripts;C:\hostedtoolcache\windows\Python\3.7.9\x64;C:\hostedtoolcache\windows\Java_Temurin-Hotspot_jdk\8.0.352-8\x64\bin;C:\Program Files\Eclipse Foundation\jdk-8.0.302.8-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\ProgramData\Chocolatey\bin;C:\Program Files\PowerShell\7\;C:\Program Files\OpenSSL\bin;C:\Program Files\CMake\bin;C:\ProgramData\chocolatey\lib\maven\apache-maven-3.8.6\bin;C:\Program Files\Git\cmd;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\usr\bin;C:\Program Files\GitHub CLI\;C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja;
          cmake -Wno-dev -S dynawo/3rdParty -B b-3-p -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../d-3-p -DOPENMODELICA_INSTALL=../OpenModelica/dynawo/OpenModelica -DOPENMODELICA_SRC=../OpenModelica/Source -DOMDEV_HOME=../OMDev -G "NMake Makefiles"
          cmake --build b-3-p --target openmodelica
          cmake --build b-3-p
          cd ..
          ren d-3-p dynawo-3rd-parties-windows
          7z a dynawo-3rd-parties-windows.zip -r dynawo-3rd-parties-windows\*
          ren dynawo-3rd-parties-windows d-3-p

      - name: Build Dynawo
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd \dynawo
          set PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x64;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\VC\VCPackages;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\Roslyn;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Team Tools\Performance Tools\x64;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Team Tools\Performance Tools;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Common\VSPerfCollectionTools\vs2019\\x64;C:\Program Files (x86)\Microsoft Visual Studio\Shared\Common\VSPerfCollectionTools\vs2019\;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\;C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64;C:\Program Files (x86)\Windows Kits\10\bin\x64;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\\MSBuild\Current\Bin;C:\Windows\Microsoft.NET\Framework64\v4.0.30319;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\;C:\vcpkg;C:\Program Files (x86)\GitHub CLI;C:\Program Files\Git\bin;C:\hostedtoolcache\windows\Python\3.7.9\x64\Scripts;C:\hostedtoolcache\windows\Python\3.7.9\x64;C:\hostedtoolcache\windows\Java_Temurin-Hotspot_jdk\8.0.352-8\x64\bin;C:\Program Files\Eclipse Foundation\jdk-8.0.302.8-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\ProgramData\Chocolatey\bin;C:\Program Files\PowerShell\7\;C:\Program Files\OpenSSL\bin;C:\Program Files\CMake\bin;C:\ProgramData\chocolatey\lib\maven\apache-maven-3.8.6\bin;C:\Program Files\Git\cmd;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\usr\bin;C:\Program Files\GitHub CLI\;C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\Ninja;
          cmake -Wno-dev -S dynawo -B b -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../d-i -DDYNAWO_HOME=.. -DINSTALL_OPENMODELICA=../../OpenModelica/dynawo/OpenModelica -DDYNAWO_THIRD_PARTY_DIR=../../d-3-p -G "NMake Makefiles"
          cmake --build b --target install || exit /b 1
          cmake --build b --target models || exit /b 1
          cmake --build b --target solvers || exit /b 1

      - name: NRT Dynawo
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd \dynawo
          set "dynawo_dir=D:\dynawo\nrt\data"
          forfiles /p %dynawo_dir% /m *.jobs /s /c "cmd /c D:\d-i\dynawo.cmd jobs @path || exit /b 1"

      - name: Deploy Dynawo
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd \dynawo
          set DYNAWO_OPENMODELICA_INSTALL=D:\OpenModelica\dynawo\OpenModelica
          util\windows\deploy.cmd ..\d-i ..\d-3-p %DYNAWO_OPENMODELICA_INSTALL% || exit /b 1

      - name: Get upload url
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          url=$(curl -s -H "authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/dynawo/dynawo/releases/tags/nightly | jq -r '.upload_url' | grep -o ".*assets")
          echo $url
          echo "url=$url" >> $GITHUB_ENV
          cd /d/dynawo
          zip=$(ls *.zip)
          version=$(echo $zip | cut -d '_' -f 3 | cut -d '.' -f 1-3)
          echo "dynawo_zip=$zip" >> $GITHUB_ENV
          echo "dynawo_version=$version" >> $GITHUB_ENV

      - name: Upload OpenModelica, 3rd parties and dynawo distribution
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd \
          curl --retry 20 --retry-delay 1 --retry-max-time 40 --max-time 200000 --limit-rate 5M --request POST --url %url%?name=OpenModelica-windows.zip --header "authorization: Bearer %GITHUB_TOKEN%" --header "Content-Type: application/zip" --data-binary @OpenModelica/dynawo/OpenModelica.zip
          curl --retry 20 --retry-delay 1 --retry-max-time 40 --max-time 200000 --limit-rate 5M --request POST --url %url%?name=dynawo-3rd-parties-windows.zip --header "authorization: Bearer %GITHUB_TOKEN%" --header "Content-Type: application/zip" --data-binary @dynawo-3rd-parties-windows.zip
          cd dynawo
          curl --retry 20 --retry-delay 1 --retry-max-time 40 --max-time 200000 --limit-rate 5M --request POST --url %url%?name=Dynawo_Windows_%dynawo_version%.zip --header "authorization: Bearer %GITHUB_TOKEN%" --header "Content-Type: application/zip" --data-binary @%dynawo_zip%
