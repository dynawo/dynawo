#!/bin/bash
#
# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# See AUTHORS.txt
# All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0
#
# This file is part of Dynawo, an hybrid C++/Modelica open source time domain
# simulation tool for power systems.
#

_dynawo() {

  local cur prev options commands
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  local global_commands global_options propose_options
  global_commands=$(TO_COMPLETE_DYNAWO_USER_SCRIPT_PATH help | sed -e '1,/=/d' | grep -v '==' | grep -v -e '^ *$'  | sed 's/^ *//g' | sed 's/(\[.*\])//g' | sed 's/\([^ ]*\) *\(.*\)/\1/g')
  global_options=""
  propose_options="no"

  local nrt_options nrt_diff_options build_tests_options build_tests_options
  nrt_options="-p -n"
  build_tests_options="tests CRV_unittest-tests DYD_unittest-tests EXTVAR_unittest-tests PAR_unittest-tests TL_unittest-tests CSTR_unittest-tests FS_unittest-tests JOB_unittest-tests COMMON_unittest-tests MODELER_COMMON_unittest-tests MODELER_DATAINTERFACE_unittest-tests MODELS_MODELNETWORK_unittest-tests SOLVERCOMMON_unittest-tests SOLVERIDA_unittest-tests SOLVERSIM_unittest-tests MODELICACOMPILER_unittest-tests"
  nrt_diff_options="--firstDirectory --secondDirectory"
  build_tests_options="tests CRV_unittest-tests DYD_unittest-tests EXTVAR_unittest-tests PAR_unittest-tests TL_unittest-tests CSTR_unittest-tests FS_unittest-tests JOB_unittest-tests COMMON_unittest-tests MODELER_COMMON_unittest-tests MODELER_DATAINTERFACE_unittest-tests MODELS_MODELNETWORK_unittest-tests SOLVERCOMMON_unittest-tests SOLVERIDA_unittest-tests SOLVERSIM_unittest-tests MODELICACOMPILER_unittest-tests"
  unittest_options="SOLVERCOMMON_unittest SOLVERSIM_unittest SOLVERIDA_unittest COMMON_unittest MODELS_MODELNETWORK_unittest CRV_unittest DYD_unittest JOB_unittest TL_unittest EXTVAR_unittest PAR_unittest CSTR_unittest FS_unittest MODELICACOMPILER_unittest MODELER_COMMON_unittest MODELER_DATAINTERFACE_unittest"
  dump_model_options="-h -m -o"
  compileModelicaModel_options="-h --model --model-dir --compilation-dir --moFiles --initFiles --lib --remove-model-files --additionalHeaderList"
  generate_preassembled_options="-h --model-list --use-standard-precompiled-models --recursive-precompiled-models-dir --non-recursive-precompiled-models-dir --precompiled-models-extension --use-standard-modelica-models --recursive-modelica-models-dir --non-recursive-modelica-models-dir --modelica-models-extension --output-dir --additional-header-files"
  compileCppModelicaModelInDynamicLib_options_equal="--model-name --directory --lib-name"
  compileCppModelicaModelInDynamicLib_options_debug="--debug"
  deploy_autocompletion_options="--deploy --update-tests --help"

  case "${COMP_WORDS[1]}" in
    build-3rd-party|build-all|build-doc|build-doxygen-doc|build-dynawo|build-dynawo-core|build-dynawo-models|build-dynawo-models-cpp|build-dynawo-solvers|build-modelica-doc|build-nrt-doc|build-user|clean-3rd-party|clean-all|clean-build-3rd-party|clean-build-all|clean-build-dynawo|clean-doc|clean-dynawo|clean-nrt-doc|clean-old-branches|clean-tests|clean-tests-coverage|config-dynawo|deploy|display-environment|distrib|distrib-omc|doc|doxygen-doc|help|help-user|list-tests|modelica-doc|nrt-doc|reset-environment|uninstall-3rd-party|uninstall-all|uninstall-dynawo|version|version-validation)
      case "${prev}" in
        build-3rd-party|build-all|build-doc|build-doxygen-doc|build-dynawo|build-dynawo-core|build-dynawo-models|build-dynawo-models-cpp|build-dynawo-solvers|build-modelica-doc|build-nrt-doc|build-user|clean-3rd-party|clean-all|clean-build-3rd-party|clean-build-all|clean-build-dynawo|clean-doc|clean-dynawo|clean-nrt-doc|clean-old-branches|clean-tests|clean-tests-coverage|config-dynawo|deploy|display-environment|distrib|distrib-omc|doc|doxygen-doc|help|help-user|list-tests|modelica-doc|nrt-doc|reset-environment|uninstall-3rd-party|uninstall-all|uninstall-dynawo|version|version-validation)
          COMPREPLY=()
          return 0
          ;;
        *)
          solo_commands="build-3rd-party build-all build-doc build-doxygen-doc build-dynawo build-dynawo-core build-dynawo-models build-dynawo-models-cpp build-dynawo-solvers build-modelica-doc build-nrt-doc build-user clean-3rd-party clean-all clean-build-3rd-party clean-build-all clean-build-dynawo clean-doc clean-dynawo clean-nrt-doc clean-old-branches clean-tests clean-tests-coverage config-dynawo deploy display-environment distrib distrib-omc doc doxygen-doc help help-user list-tests modelica-doc nrt-doc reset-environment uninstall-3rd-party uninstall-all uninstall-dynawo version version-validation"
          commands=$solo_commands
          ;;
      esac
      ;;
    jobs|jobs-valgrind|jobs-gdb|jobs-valgrind-callgrind|jobs-valgrind-dhat|jobs-valgrind-massif|jobs-with-curves)
      case "${prev}" in
        jobs|jobs-valgrind|jobs-gdb|jobs-valgrind-callgrind|jobs-valgrind-dhat|jobs-valgrind-massif|jobs-with-curves)
          _filedir '@(jobs|xml)'
          return 0
          ;;
        *.jobs|*.xml)
          commands=""
          ;;
        *)
          jobs_commands="jobs jobs-valgrind jobs-gdb jobs-valgrind-callgrind jobs-valgrind-dhat jobs-valgrind-massif jobs-with-curves"
          commands=$jobs_commands
          ;;
        esac
      ;;
    nrt)
      case "${prev}" in
        -n)
          local nrt_n=$(find TO_COMPLETE_DYNAWO_HOME/nrt/data -mindepth 1 -type d | grep -v reference | grep -v outputs | sed 's#TO_COMPLETE_DYNAWO_HOME/nrt/data/##')
          commands=$nrt_n
          ;;
        -p)
          COMPREPLY=()
          return 0
          ;;
        nrt)
          options="$nrt_options"
          propose_options="yes"
          ;;
        *)
          if  [[ -z ${COMP_WORDS[3]} ]]; then
            nrt_commands="nrt nrt-diff"
            commands=$nrt_commands
          else
            commands=""
          fi
          ;;
      esac
      ;;
    build-tests|build-tests-coverage)
      case "${prev}" in
        build-tests|build-tests-coverage)
          options="$build_tests_options"
          propose_options="yes"
          ;;
        *)
          if [[ -z ${COMP_WORDS[2]} ]]; then
            build_tests_commands="build-tests build-tests-coverage"
            commands=$build_tests_commands
          else
            commands=""
          fi
          ;;
      esac
      ;;
    unittest-gdb)
      case "${prev}" in
        unittest-gdb)
          options="$unittest_options"
          propose_options="yes"
          ;;
        *)
          if [[ -z ${COMP_WORDS[2]} ]]; then
            unittest_commands="unittest-gdb"
            commands=$unittest_commands
          else
            commands=""
          fi
          ;;
      esac
      ;;
    nrt-diff)
      case "${prev}" in
        nrt-diff)
          compopt -o nospace
          COMPREPLY=($(compgen -S\= -W "--firstDirectory" -- ${cur}))
          return 0
          ;;
        --firstDirectory|--secondDirectory)
          cur=${cur#*=}
          _filedir -d
          return 0
          ;;
        =)
          _filedir -d
          return 0
          ;;
        *)
          case ${COMP_WORDS[2]} in
            --firstDirectory)
              if [[ ! -z ${COMP_WORDS[4]} && "${COMP_WORDS[5]}" != "--secondDirectory" ]]; then
                compopt -o nospace
                COMPREPLY=($(compgen -S\= -W "--secondDirectory" -- ${cur}))
                return 0
              fi
            ;;
          esac
      esac
      ;;
    dump-model)
      case "${prev}" in
        -h)
          COMPREPLY=()
          return 0
          ;;
        -m)
          _filedir '@(so|dylib)'
          return 0
          ;;
        -o)
          COMPREPLY=($(compgen -S ".desc.xml" -W "$(echo ${COMP_WORDS[3]} | sed 's/[.]so//')" -- ${cur}))
          return 0
          ;;
        *.so)
          options="-o"
          propose_options="yes"
          ;;
        *.dylib)
          options="-o"
          propose_options="yes"
          ;;
        dump-model|dump-model-gdb|dump-model-valgrind)
          options="$dump_model_options"
          propose_options="yes"
          ;;
        *)
          if [[ -z ${COMP_WORDS[2]} ]]; then
            dump_model_commands="dump-model dump-model-gdb dump-model-valgrind"
            commands=$dump_model_commands
          else
            commands=""
          fi
          ;;
      esac
      ;;
    compileModelicaModel)
      case "${prev}" in
        -h)
          COMPREPLY=()
          return 0
          ;;
        compileModelicaModel)
          options="$compileModelicaModel_options"
          propose_options="yes"
          ;;
        *)
          if [[ -z ${COMP_WORDS[2]} ]]; then
            compileModelicaModel_commands="compileModelicaModel"
            commands=$compileModelicaModel_commands
          else
            _handle_compileModelicaModel_options
            return 0
          fi
        ;;
      esac
      ;;
    compileCppModelicaModelInDynamicLib)
      case "${prev}" in
        compileCppModelicaModelInDynamicLib)
          compopt -o nospace
          COMPREPLY=($(compgen -S\= -W "$compileCppModelicaModelInDynamicLib_options_equal" -- ${cur}) $(compgen -W "$compileCppModelicaModelInDynamicLib_options_debug" -- ${cur}))
          return 0
          ;;
        *)
          if [[ -z ${COMP_WORDS[2]} ]]; then
            compileCppModelicaModelInDynamicLib_commands="compileCppModelicaModelInDynamicLib"
            commands=$compileCppModelicaModelInDynamicLib_commands
          else
            _handle_compileCppModelicaModelInDynamicLib_options
            return 0
          fi
        ;;
      esac
      ;;
    generate-preassembled)
      case "${prev}" in
        -h)
          COMPREPLY=()
          return 0
          ;;
        generate-preassembled|generate-preassembled-gdb)
          options="$generate_preassembled_options"
          propose_options="yes"
          ;;
        *)
          if [[ -z ${COMP_WORDS[2]} ]]; then
            generate_preassembled_commands="generate-preassembled generate-preassembled-gdb"
            commands=$generate_preassembled_commands
          else
            _handle_generate_preassembled_options
            return 0
          fi
        ;;
      esac
      ;;
    deploy|deploy-autocompletion)
      case "${prev}" in
        --help)
          COMPREPLY=()
          return 0
          ;;
        --update-tests)
          COMPREPLY=()
          return 0
          ;;
        --deploy)
          COMPREPLY=($(compgen -W "--shell-type --script --permanent-path" -- $cur))
          return 0
          ;;
        deploy-autocompletion)
          options="$deploy_autocompletion_options"
          propose_options="yes"
          ;;
        deploy)
          COMPREPLY=()
          return 0
          ;;
        *)
          if [[ -z ${COMP_WORDS[2]} ]]; then
            deploy_autocompletion_commands="deploy deploy-autocompletion"
            commands=$deploy_autocompletion_commands
          else
            _handle_deploy_autocompletion_options
            return 0
          fi
        ;;
      esac
      ;;
    *)
      case "${prev}" in
        *)
          options="$global_options"
          commands="$global_commands"
          ;;
      esac
    ;;
  esac

  if [[ $cur == -* ]]; then
    COMPREPLY=($(compgen -W "$options" -- $cur))
  elif [[ $propose_options == "yes" ]]; then
    COMPREPLY=($(compgen -W "$options" -- $cur))
  else
    COMPREPLY=($(compgen -W "$commands" -- $cur))
  fi

  return 0
}

_handle_compileModelicaModel_options() {
  compileModelicaModel_options=(--model --model-dir --compilation-dir --moFiles --initFiles --lib --remove-model-files --additionalHeaderList)
  compileModelicaModel_options_echo="--model --model-dir --compilation-dir --moFiles --initFiles --lib --remove-model-files --additionalHeaderList"

  case "${prev}" in
    --model) COMPREPLY=(); return 0;;
    --model-dir) _filedir; return 0;;
    --compilation-dir) _filedir; return 0;;
    --moFiles) _filedir '@(mo)'; return 0;;
    --initFiles) _filedir '@(mo)'; return 0;;
    --lib) COMPREPLY=(); return 0;;
    --remove-model-files) COMPREPLY=($(compgen -W "true false" -- $cur)); return 0;;
    --additionalHeaderList) COMPREPLY=(); return 0;;
  esac

  local other_options=""

  for ((j = 0; j < ${#compileModelicaModel_options[@]}; ++j)); do
    for ((i = 1; i < ${#COMP_WORDS[@]}; ++i)); do
      if [[ ${COMP_WORDS[i]} == ${compileModelicaModel_options[j]} ]]; then
        compileModelicaModel_options_echo=$(echo $compileModelicaModel_options_echo | sed "s/${compileModelicaModel_options[j]}//")
      fi
    done
  done

  other_options=$compileModelicaModel_options_echo
  COMPREPLY=($(compgen -W "$other_options" -- $cur))
}

_handle_generate_preassembled_options() {
  generate_preassembled_options=(--model-list --use-standard-precompiled-models --recursive-precompiled-models-dir --non-recursive-precompiled-models-dir --precompiled-models-extension --use-standard-modelica-models --recursive-modelica-models-dir --non-recursive-modelica-models-dir --modelica-models-extension --output-dir --additional-header-files)
  generate_preassembled_options_echo="--model-list --use-standard-precompiled-models --recursive-precompiled-models-dir --non-recursive-precompiled-models-dir --precompiled-models-extension --use-standard-modelica-models --recursive-modelica-models-dir --non-recursive-modelica-models-dir --modelica-models-extension --output-dir --additional-header-files"

  case "${prev}" in
    --model-list) _filedir '@(xml)'; return 0;;
    --use-standard-precompiled-models) COMPREPLY=($(compgen -W "true false" -- $cur)); return 0;;
    --recursive-precompiled-models-dir) _filedir; return 0;;
    --non-recursive-precompiled-models-dir) _filedir; return 0;;
    --precompiled-models-extension) COMPREPLY=(); return 0;;
    --use-standard-modelica-models) COMPREPLY=($(compgen -W "true false" -- $cur)); return 0;;
    --recursive-modelica-models-dir) _filedir; return 0;;
    --non-recursive-modelica-models-dir) _filedir; return 0;;
    --modelica-models-extension) COMPREPLY=(); return 0;;
    --output-dir) _filedir; return 0;;
    --remove-model-files) COMPREPLY=($(compgen -W "true false" -- $cur)); return 0;;
    --additional-header-files) COMPREPLY=(); return 0;;
  esac

  local other_options=""

  for ((j = 0; j < ${#generate_preassembled_options[@]}; ++j)); do
    for ((i = 1; i < ${#COMP_WORDS[@]}; ++i)); do
      if [[ ${COMP_WORDS[i]} == ${generate_preassembled_options[j]} ]]; then
        generate_preassembled_options_echo=$(echo $generate_preassembled_options_echo | sed "s/${generate_preassembled_options[j]}//")
      fi
    done
  done

  other_options=$generate_preassembled_options_echo
  COMPREPLY=($(compgen -W "$other_options" -- $cur))
}

_handle_compileCppModelicaModelInDynamicLib_options() {
  compileCppModelicaModelInDynamicLib_options=(--model-name --directory --lib-name)
  compileCppModelicaModelInDynamicLib_options_echo="--model-name --directory --lib-name"

  compileCppModelicaModelInDynamicLib_options_debug=(--debug)
  compileCppModelicaModelInDynamicLib_options_debug_echo="--debug"

  case "${prev}" in
    --model-name) COMPREPLY=(); return 0;;
    --directory)
      cur=${cur#*=}
      _filedir -d
      return 0
      ;;
    --lib-name) COMPREPLY=(); return 0;;
    --debug) ;;
  esac

  local other_options=""
  local other_options_debug=""

  for ((j = 0; j < ${#compileCppModelicaModelInDynamicLib_options[@]}; ++j)); do
    for ((i = 1; i < ${#COMP_WORDS[@]}; ++i)); do
      if [[ ${COMP_WORDS[i]} == ${compileCppModelicaModelInDynamicLib_options[j]} ]]; then
        compileCppModelicaModelInDynamicLib_options_echo=$(echo $compileCppModelicaModelInDynamicLib_options_echo | sed "s/${compileCppModelicaModelInDynamicLib_options[j]}//")
      fi
    done
  done

  for ((j = 0; j < ${#compileCppModelicaModelInDynamicLib_options_debug[@]}; ++j)); do
    for ((i = 1; i < ${#COMP_WORDS[@]}; ++i)); do
      if [[ ${COMP_WORDS[i]} == ${compileCppModelicaModelInDynamicLib_options_debug[j]} ]]; then
        compileCppModelicaModelInDynamicLib_options_debug_echo=$(echo $compileCppModelicaModelInDynamicLib_options_debug_echo | sed "s/${compileCppModelicaModelInDynamicLib_options_debug[j]}//")
      fi
    done
  done

  other_options=$compileCppModelicaModelInDynamicLib_options_echo
  other_options_debug=$compileCppModelicaModelInDynamicLib_options_debug_echo
  compopt -o nospace
  COMPREPLY=($(compgen -S\= -W "$other_options" -- ${cur}) $(compgen -W "$other_options_debug" -- ${cur}))
}

_handle_deploy_autocompletion_options() {
  deploy_autocompletion_options=(--script --shell-type --permanent-path)
  deploy_autocompletion_options_echo="--script --shell-type --permanent-path"

  case "${prev}" in
    --script) _filedir '@(sh)'; return 0;;
    --permanent-path) _filedir; return 0;;
    --shell-type) COMPREPLY=($(compgen -W "bash zsh" -- $cur)); return 0;;
    --add-command) COMPREPLY=(); return 0;;
  esac

  local other_options=""

  for ((j = 0; j < ${#deploy_autocompletion_options[@]}; ++j)); do
    for ((i = 1; i < ${#COMP_WORDS[@]}; ++i)); do
      if [[ ${COMP_WORDS[i]} == ${deploy_autocompletion_options[j]} ]]; then
        deploy_autocompletion_options_echo=$(echo $deploy_autocompletion_options_echo | sed "s/${deploy_autocompletion_options[j]}//")
      fi
    done
  done

  other_options=$deploy_autocompletion_options_echo
  COMPREPLY=($(compgen -W "$other_options" -- $cur))
}

complete -F _dynawo dynawo TO_COMPLETE_DYNAWO_USER_SCRIPT_NAME
