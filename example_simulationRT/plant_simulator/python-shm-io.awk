#!/usr/bin/awk -f

# usage:  ./python-shm-io.awk sim-control.h

# create c code to build libpython-shm-io.so
# use library to access c-created shared memory from python

BEGIN {
    PyWriteInit = "shm_write_init.py";
    PyReadInit  = "shm_read_init.py";
    PyWriteDef = "shm_write_def.py";
    PyReadDef  = "shm_read_def.py";
    PySendDy = "dyn_send.py";
    print "# place under initReadFunctions" > PyReadInit;
    print "# place under initWriteFunctions" > PyWriteInit;
    print "# definition of read function" > PyReadDef;
    print "# definition of write function" > PyWriteDef;
    print "# place in sendData of DynawoConnectCl" > PySendDy;
    print "/* code generated by python-shm-io.awk */";
    print "/* compile: gcc -Wall -shared -o libpython-shm-io.so */";
    print "/*          -fPIC python-shm-io.c */";
    print "#include <stdio.h>";
    print "#include <sys/types.h>";
    print "#include <sys/shm.h>";
    print "";
    print "#include \"sim-control.h\"";
    print "";
    print "/* struct to control simulation */";
    print "simControlGlobal_t *simControlGlobal;";
    print "int simControlGlobalId;";
    print "";
    print "int init_shm()";
    print "{";
    print "  /*";
    print "   * Locate shm segment.";
    print "   */";
    print "  if ((simControlGlobalId = shmget(simControlGlobalKey,";
    print "                            sizeof(simControlGlobal_t), 0666)) < 0)";
    print "    {";
    print "      perror(\"shmget\");";
    print "      return -1;";
    print "    }";
    print "";
    print "  /*";
    print "   * Now we attach the segment to our data space.";
    print "   */";
    print "  if ((simControlGlobal = shmat(simControlGlobalId, NULL, 0))";
    print "      == (void *) -1) {";
    print "    perror(\"shmat\");";
    print "    return -1;";
    print "  }";
    print "  return simControlGlobalId;";
    print "}";
    print "";
    print "";
    print "int cleanup_shm()";
    print "{";
    print "  if(shmdt(simControlGlobal) != 0) {";
    print "    fprintf(stderr, \"Could not close memory segment.\\n\");";
    print "    return -1;";
    print "  }";
    print "  simControlGlobal = NULL;";
    print "  printf(\"python-shm-io: shm cleaned up\\n\");";
    print "  return 0;";
    print "}";

    typeOut = 0;
}

{
    var = $NF;
    if ($3 == "_simControlGlobal")
        typeOut = 1;
    else if ($2 == "simControlGlobal_t;")
        typeOut = 0;
    else if (($1 != "struct") && (index(var, ";") > 0 ) && typeOut) {
        sub(/;/, "", var);
        print $1 " read_" var "()";
        print "{";
        print "  return simControlGlobal->" var ";";
        print "}";
        print "";
        print "        self.cIOlib.read_" var ".restype = ctypes.c_" $1 >> PyReadInit;
        print "    def read_" var "(self):" >> PyReadDef;
        print "        return self.cIOlib.read_" var "()" >> PyReadDef;
        print "void write_" var "(" $1 " " var ")";
        print "{";
        print"  simControlGlobal->" var " = " var ";";
        print "}";
        print "";
        print "        self.cIOlib.write_" var ".argtypes = [ ctypes.c_" $1 " ]" >> PyWriteInit;
        print "    def write_" var "(self," var "):" >> PyWriteDef;
        print "        self.cIOlib.write_" var "(" var ")" >> PyWriteDef;
        if (index(var, "dynIn") > 0) {
            print "        self.socket.send_string(\"" var "\" + \" ,input_value," $1 ", %e)\" % read_" var "())" >> PySendDy;
            print "        # Wait for acknowledgment" >> PySendDy;
            print "        message = self.socket.recv_string()" >> PySendDy;
        }
    }
}

END {
    print "";
    print "";
    print "/* end of code */";
}
