diff -urpN SuiteSparse/AMD/CMakeLists.txt SuiteSparse.patch/AMD/CMakeLists.txt
--- SuiteSparse/AMD/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ SuiteSparse.patch/AMD/CMakeLists.txt	2019-11-06 12:04:23.625796280 +0100
@@ -0,0 +1,58 @@
+file(READ "Include/amd.h" _file_content)
+string(REGEX REPLACE ".*#define[ \t]+AMD_MAIN_VERSION[ \t]+([0-9]+).*"   "\\1" AMD_VERSION_MAJOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+AMD_SUB_VERSION[ \t]+([0-9]+).*"    "\\1" AMD_VERSION_MINOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+AMD_SUBSUB_VERSION[ \t]+([0-9]+).*" "\\1" AMD_VERSION_PATCH "${_file_content}")
+set(AMD_VERSION_STRING "${AMD_VERSION_MAJOR}.${AMD_VERSION_MINOR}.${AMD_VERSION_PATCH}")
+message("AMD_VERSION_STRING=${AMD_VERSION_STRING}")
+
+set(AMD_SRCS
+    Source/amd_1.c
+    Source/amd_2.c
+    Source/amd_aat.c
+    Source/amd_control.c
+    Source/amd_defaults.c
+    Source/amd_dump.c
+    #Source/amd_global.c
+    Source/amd_info.c
+    Source/amd_order.c
+    Source/amd_post_tree.c 
+    Source/amd_postorder.c
+    Source/amd_preprocess.c
+    Source/amd_valid.c
+    )
+
+add_library(amd-i OBJECT ${AMD_SRCS})
+target_compile_definitions(amd-i PRIVATE DINT)
+target_include_directories(amd-i PRIVATE Include $<TARGET_PROPERTY:suitesparseconfig,INCLUDE_DIRECTORIES>)
+
+add_library(amd-l OBJECT ${AMD_SRCS})
+target_compile_definitions(amd-l PRIVATE DLONG)
+target_include_directories(amd-l PRIVATE Include $<TARGET_PROPERTY:suitesparseconfig,INCLUDE_DIRECTORIES>)
+
+add_library(amd $<TARGET_OBJECTS:amd-i> $<TARGET_OBJECTS:amd-l>)
+set_target_properties(amd PROPERTIES
+    OUTPUT_NAME $<$<BOOL:${WIN32}>:lib>amd
+    SOVERSION ${AMD_VERSION_MAJOR}
+    VERSION ${AMD_VERSION_STRING}
+    WINDOWS_EXPORT_ALL_SYMBOLS TRUE
+    )
+
+target_include_directories(amd
+    PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/Include>
+    $<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>
+    )
+
+target_link_libraries(amd PUBLIC suitesparseconfig)
+
+install(TARGETS amd
+    EXPORT suitesparse-targets
+    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+    RUNTIME DESTINATION ${BIN_INSTALL_DIR}
+    )
+
+install(DIRECTORY Include/
+    DESTINATION ${INCLUDE_INSTALL_DIR}
+    FILES_MATCHING PATTERN "*.h"
+    )
diff -urpN SuiteSparse/BTF/CMakeLists.txt SuiteSparse.patch/BTF/CMakeLists.txt
--- SuiteSparse/BTF/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ SuiteSparse.patch/BTF/CMakeLists.txt	2019-11-06 12:04:23.625796280 +0100
@@ -0,0 +1,47 @@
+file(READ "Include/btf.h" _file_content)
+string(REGEX REPLACE ".*#define[ \t]+BTF_MAIN_VERSION[ \t]+([0-9]+).*"   "\\1" BTF_VERSION_MAJOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+BTF_SUB_VERSION[ \t]+([0-9]+).*"    "\\1" BTF_VERSION_MINOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+BTF_SUBSUB_VERSION[ \t]+([0-9]+).*" "\\1" BTF_VERSION_PATCH "${_file_content}")
+set(BTF_VERSION_STRING "${BTF_VERSION_MAJOR}.${BTF_VERSION_MINOR}.${BTF_VERSION_PATCH}")
+message("BTF_VERSION_STRING=${BTF_VERSION_STRING}")
+
+set(BTF_SRCS
+    Source/btf_maxtrans.c
+    Source/btf_order.c
+    Source/btf_strongcomp.c
+    )
+
+add_library(btf-i OBJECT ${BTF_SRCS})
+target_include_directories(btf-i PRIVATE Include $<TARGET_PROPERTY:suitesparseconfig,INCLUDE_DIRECTORIES>)
+
+add_library(btf-l OBJECT ${BTF_SRCS})
+target_compile_definitions(btf-l PRIVATE DLONG)
+target_include_directories(btf-l PRIVATE Include $<TARGET_PROPERTY:suitesparseconfig,INCLUDE_DIRECTORIES>)
+
+add_library(btf $<TARGET_OBJECTS:btf-i> $<TARGET_OBJECTS:btf-l>)
+set_target_properties(btf PROPERTIES
+    OUTPUT_NAME $<$<BOOL:${WIN32}>:lib>btf
+    SOVERSION ${BTF_VERSION_MAJOR}
+    VERSION ${BTF_VERSION_STRING}
+    WINDOWS_EXPORT_ALL_SYMBOLS TRUE
+    )
+
+target_include_directories(btf
+    PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/Include>
+    $<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>
+    )
+
+target_link_libraries(btf PUBLIC suitesparseconfig)
+
+install(TARGETS btf
+    EXPORT suitesparse-targets
+    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+    RUNTIME DESTINATION ${BIN_INSTALL_DIR}
+    )
+
+install(DIRECTORY Include/
+    DESTINATION ${INCLUDE_INSTALL_DIR}
+    FILES_MATCHING PATTERN "*.h"
+    )
diff -urpN SuiteSparse/CMakeLists.txt SuiteSparse.patch/CMakeLists.txt
--- SuiteSparse/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ SuiteSparse.patch/CMakeLists.txt	2019-11-06 12:04:23.625796280 +0100
@@ -0,0 +1,24 @@
+cmake_minimum_required(VERSION 3.4.3 FATAL_ERROR)
+
+project(suitesparse)
+
+option(BUILD_SHARED_LIBS "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)" ON)
+
+set(INCLUDE_INSTALL_DIR "include")
+set(LIB_INSTALL_DIR     "lib")
+set(BIN_INSTALL_DIR     "bin")
+set(CONFIG_INSTALL_DIR  "cmake")
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
+add_subdirectory(SuiteSparse_config)
+add_subdirectory(AMD)
+add_subdirectory(BTF)
+add_subdirectory(COLAMD)
+add_subdirectory(KLU)
+
+install(EXPORT suitesparse-targets
+    NAMESPACE SuiteSparse::
+    FILE suitesparse-config.cmake
+    DESTINATION ${CONFIG_INSTALL_DIR}
+    )
diff -urpN SuiteSparse/COLAMD/CMakeLists.txt SuiteSparse.patch/COLAMD/CMakeLists.txt
--- SuiteSparse/COLAMD/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ SuiteSparse.patch/COLAMD/CMakeLists.txt	2019-11-06 12:04:23.625796280 +0100
@@ -0,0 +1,45 @@
+file(READ "Include/colamd.h" _file_content)
+string(REGEX REPLACE ".*#define[ \t]+COLAMD_MAIN_VERSION[ \t]+([0-9]+).*"   "\\1" COLAMD_VERSION_MAJOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+COLAMD_SUB_VERSION[ \t]+([0-9]+).*"    "\\1" COLAMD_VERSION_MINOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+COLAMD_SUBSUB_VERSION[ \t]+([0-9]+).*" "\\1" COLAMD_VERSION_PATCH "${_file_content}")
+set(COLAMD_VERSION_STRING "${COLAMD_VERSION_MAJOR}.${COLAMD_VERSION_MINOR}.${COLAMD_VERSION_PATCH}")
+message("COLAMD_VERSION_STRING=${COLAMD_VERSION_STRING}")
+
+set(COLAMD_SRCS
+    Source/colamd.c
+    )
+
+add_library(colamd-i OBJECT ${COLAMD_SRCS})
+target_include_directories(colamd-i PRIVATE Include $<TARGET_PROPERTY:suitesparseconfig,INCLUDE_DIRECTORIES>)
+
+add_library(colamd-l OBJECT ${COLAMD_SRCS})
+target_compile_definitions(colamd-l PRIVATE DLONG)
+target_include_directories(colamd-l PRIVATE Include $<TARGET_PROPERTY:suitesparseconfig,INCLUDE_DIRECTORIES>)
+
+add_library(colamd $<TARGET_OBJECTS:colamd-i> $<TARGET_OBJECTS:colamd-l>)
+set_target_properties(colamd PROPERTIES
+    OUTPUT_NAME $<$<BOOL:${WIN32}>:lib>colamd
+    SOVERSION ${COLAMD_VERSION_MAJOR}
+    VERSION ${COLAMD_VERSION_STRING}
+    WINDOWS_EXPORT_ALL_SYMBOLS TRUE
+    )
+
+target_include_directories(colamd
+    PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/Include>
+    $<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>
+    )
+
+target_link_libraries(colamd PUBLIC suitesparseconfig)
+
+install(TARGETS colamd
+    EXPORT suitesparse-targets
+    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+    RUNTIME DESTINATION ${BIN_INSTALL_DIR}
+    )
+
+install(DIRECTORY Include/
+    DESTINATION ${INCLUDE_INSTALL_DIR}
+    FILES_MATCHING PATTERN "*.h"
+    )
diff -urpN SuiteSparse/KLU/CMakeLists.txt SuiteSparse.patch/KLU/CMakeLists.txt
--- SuiteSparse/KLU/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ SuiteSparse.patch/KLU/CMakeLists.txt	2019-11-06 12:04:23.625796280 +0100
@@ -0,0 +1,80 @@
+file(READ "Include/klu.h" _file_content)
+string(REGEX REPLACE ".*#define[ \t]+KLU_MAIN_VERSION[ \t]+([0-9]+).*"   "\\1" KLU_VERSION_MAJOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+KLU_SUB_VERSION[ \t]+([0-9]+).*"    "\\1" KLU_VERSION_MINOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+KLU_SUBSUB_VERSION[ \t]+([0-9]+).*" "\\1" KLU_VERSION_PATCH "${_file_content}")
+set(KLU_VERSION_STRING "${KLU_VERSION_MAJOR}.${KLU_VERSION_MINOR}.${KLU_VERSION_PATCH}")
+message("KLU_VERSION_STRING=${KLU_VERSION_STRING}")
+
+set(KLU_SRCS
+    Source/klu.c
+    Source/klu_diagnostics.c
+    Source/klu_dump.c
+    Source/klu_extract.c
+    Source/klu_factor.c
+    Source/klu_free_numeric.c
+    Source/klu_kernel.c
+    Source/klu_refactor.c
+    Source/klu_scale.c
+    Source/klu_solve.c
+    Source/klu_sort.c
+    Source/klu_tsolve.c
+    )
+
+set(COMMON_SRCS
+    Source/klu_analyze.c
+    Source/klu_analyze_given.c
+    Source/klu_defaults.c
+    Source/klu_free_symbolic.c
+    Source/klu_memory.c
+    )
+
+add_library(klu-i OBJECT ${KLU_SRCS})
+
+add_library(klu-z OBJECT ${KLU_SRCS})
+target_compile_definitions(klu-z PRIVATE COMPLEX)
+
+add_library(klu-l OBJECT ${KLU_SRCS})
+target_compile_definitions(klu-l PRIVATE DLONG)
+
+add_library(klu-zl OBJECT ${KLU_SRCS})
+target_compile_definitions(klu-zl PRIVATE COMPLEX DLONG)
+
+add_library(common-i OBJECT ${COMMON_SRCS})
+
+add_library(common-l OBJECT ${COMMON_SRCS})
+target_compile_definitions(common-l PRIVATE DLONG)
+
+set_target_properties(klu-i klu-z klu-l klu-zl common-i common-l PROPERTIES
+    INCLUDE_DIRECTORIES $<TARGET_PROPERTY:klu,INCLUDE_DIRECTORIES>
+    )
+
+add_library(klu
+    $<TARGET_OBJECTS:klu-i> $<TARGET_OBJECTS:klu-z> $<TARGET_OBJECTS:klu-l> $<TARGET_OBJECTS:klu-zl>
+    $<TARGET_OBJECTS:common-i> $<TARGET_OBJECTS:common-l>
+    )
+set_target_properties(klu PROPERTIES
+    OUTPUT_NAME $<$<BOOL:${WIN32}>:lib>klu
+    SOVERSION ${KLU_VERSION_MAJOR}
+    VERSION ${KLU_VERSION_STRING}
+    WINDOWS_EXPORT_ALL_SYMBOLS TRUE
+    )
+
+target_include_directories(klu
+    PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/Include>
+    $<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>
+    )
+
+target_link_libraries(klu PUBLIC amd btf colamd)
+
+install(TARGETS klu
+    EXPORT suitesparse-targets
+    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+    RUNTIME DESTINATION ${BIN_INSTALL_DIR}
+    )
+
+install(DIRECTORY Include/
+    DESTINATION ${INCLUDE_INSTALL_DIR}
+    FILES_MATCHING PATTERN "*.h"
+    )
diff -urpN SuiteSparse/SuiteSparse_config/CMakeLists.txt SuiteSparse.patch/SuiteSparse_config/CMakeLists.txt
--- SuiteSparse/SuiteSparse_config/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ SuiteSparse.patch/SuiteSparse_config/CMakeLists.txt	2019-11-06 12:05:07.732293598 +0100
@@ -0,0 +1,43 @@
+file(READ "SuiteSparse_config.h" _file_content)
+string(REGEX REPLACE ".*#define[ \t]+SUITESPARSE_MAIN_VERSION[ \t]+([0-9]+).*"   "\\1" SUITESPARSE_VERSION_MAJOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+SUITESPARSE_SUB_VERSION[ \t]+([0-9]+).*"    "\\1" SUITESPARSE_VERSION_MINOR "${_file_content}")
+string(REGEX REPLACE ".*#define[ \t]+SUITESPARSE_SUBSUB_VERSION[ \t]+([0-9]+).*" "\\1" SUITESPARSE_VERSION_PATCH "${_file_content}")
+set(SUITESPARSE_VERSION_STRING "${SUITESPARSE_VERSION_MAJOR}.${SUITESPARSE_VERSION_MINOR}.${SUITESPARSE_VERSION_PATCH}")
+message("SUITESPARSE_VERSION_STRING=${SUITESPARSE_VERSION_STRING}")
+
+set(SUITESPARSECONFIG_SRCS
+    SuiteSparse_config.c
+    )
+
+add_library(suitesparseconfig ${SUITESPARSECONFIG_SRCS})
+set_target_properties(suitesparseconfig PROPERTIES
+    OUTPUT_NAME suitesparseconfig
+    SOVERSION ${SUITESPARSE_VERSION_MAJOR}
+    VERSION ${SUITESPARSE_VERSION_STRING}
+    WINDOWS_EXPORT_ALL_SYMBOLS TRUE
+    )
+
+include(GenerateExportHeader)
+generate_export_header(suitesparseconfig
+    BASE_NAME suitesparse
+    )
+
+target_include_directories(suitesparseconfig
+    PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+    $<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>
+    )
+
+target_link_libraries(suitesparseconfig $<$<CXX_COMPILER_ID:GNU>:rt> $<$<CXX_COMPILER_ID:GNU>:m>)
+
+install(TARGETS suitesparseconfig
+    EXPORT suitesparse-targets
+    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+    RUNTIME DESTINATION ${BIN_INSTALL_DIR}
+    )
+
+install(FILES SuiteSparse_config.h ${CMAKE_CURRENT_BINARY_DIR}/suitesparse_export.h
+    DESTINATION ${INCLUDE_INSTALL_DIR}
+    )
