diff --git a/include/ida/ida.h b/include/ida/ida.h
index bdfa9efc..1ce3ce84 100644
--- a/include/ida/ida.h
+++ b/include/ida/ida.h
@@ -134,6 +134,7 @@ SUNDIALS_EXPORT int IDASetUserData(void *ida_mem, void *user_data);
 SUNDIALS_EXPORT int IDASetMaxOrd(void *ida_mem, int maxord);
 SUNDIALS_EXPORT int IDASetMaxNumSteps(void *ida_mem, long int mxsteps);
 SUNDIALS_EXPORT int IDASetInitStep(void *ida_mem, realtype hin);
+SUNDIALS_EXPORT int IDASetMinStep(void *ida_mem, realtype hmin);
 SUNDIALS_EXPORT int IDASetMaxStep(void *ida_mem, realtype hmax);
 SUNDIALS_EXPORT int IDASetStopTime(void *ida_mem, realtype tstop);
 SUNDIALS_EXPORT int IDASetNonlinConvCoef(void *ida_mem, realtype epcon);
diff --git a/include/kinsol/kinsol.h b/include/kinsol/kinsol.h
index fa8a372a..f5ac23bb 100644
--- a/include/kinsol/kinsol.h
+++ b/include/kinsol/kinsol.h
@@ -137,6 +137,8 @@ SUNDIALS_EXPORT int KINGetNumBacktrackOps(void *kinmem, long int *nbacktr);
 SUNDIALS_EXPORT int KINGetFuncNorm(void *kinmem, realtype *fnorm);
 SUNDIALS_EXPORT int KINGetStepLength(void *kinmem, realtype *steplength);
 SUNDIALS_EXPORT char *KINGetReturnFlagName(long int flag);
+SUNDIALS_EXPORT int KINGetResiduals(void *kinmem, N_Vector fvalues);
+SUNDIALS_EXPORT int KINGetWeights(void *kinmem, N_Vector weights);
 
 /* Free function */
 SUNDIALS_EXPORT void KINFree(void **kinmem);
diff --git a/src/ida/ida.c b/src/ida/ida.c
index c950af8a..9baa4bb5 100644
--- a/src/ida/ida.c
+++ b/src/ida/ida.c
@@ -298,6 +298,7 @@ void *IDACreate(void)
   IDA_mem->ida_maxord      = MAXORD_DEFAULT;
   IDA_mem->ida_mxstep      = MXSTEP_DEFAULT;
   IDA_mem->ida_hmax_inv    = HMAX_INV_DEFAULT;
+  IDA_mem->ida_hmin        = ZERO;
   IDA_mem->ida_hin         = ZERO;
   IDA_mem->ida_epcon       = EPCON;
   IDA_mem->ida_maxnef      = MXNEF;
@@ -2551,6 +2552,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem, int nflag, realtype err_k, realtype er
          Note that if nflag=IDA_CONSTR_RECVR then rr was already set in IDANls */
       if (nflag != IDA_CONSTR_RECVR) IDA_mem->ida_rr = QUARTER;
       IDA_mem->ida_hh *= IDA_mem->ida_rr;
+      IDA_mem->ida_hh = SUNMAX(IDA_mem->ida_hh,IDA_mem->ida_hmin);
 
       /* Test if there were too many convergence failures */
       if (*ncfPtr < IDA_mem->ida_maxncf)  return(PREDICT_AGAIN);
@@ -2579,6 +2581,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem, int nflag, realtype err_k, realtype er
       IDA_mem->ida_rr = PT9 * SUNRpowerR( TWO * err_knew + PT0001, -ONE/(IDA_mem->ida_kk + 1) );
       IDA_mem->ida_rr = SUNMAX(QUARTER, SUNMIN(PT9,IDA_mem->ida_rr));
       IDA_mem->ida_hh *= IDA_mem->ida_rr;
+      IDA_mem->ida_hh = SUNMAX(IDA_mem->ida_hh,IDA_mem->ida_hmin);
       return(PREDICT_AGAIN);
 
     } else if (*nefPtr == 2) {
@@ -2589,6 +2592,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem, int nflag, realtype err_k, realtype er
       IDA_mem->ida_kk = IDA_mem->ida_knew;
       IDA_mem->ida_rr = QUARTER;
       IDA_mem->ida_hh *= IDA_mem->ida_rr;
+      IDA_mem->ida_hh = SUNMAX(IDA_mem->ida_hh,IDA_mem->ida_hmin);
       return(PREDICT_AGAIN);
 
     } else if (*nefPtr < IDA_mem->ida_maxnef) {
@@ -2598,6 +2602,7 @@ static int IDAHandleNFlag(IDAMem IDA_mem, int nflag, realtype err_k, realtype er
       IDA_mem->ida_kk = 1;
       IDA_mem->ida_rr = QUARTER;
       IDA_mem->ida_hh *= IDA_mem->ida_rr;
+      IDA_mem->ida_hh = SUNMAX(IDA_mem->ida_hh,IDA_mem->ida_hmin);
       return(PREDICT_AGAIN);
 
     } else {
@@ -2963,8 +2968,12 @@ static int IDARcheck2(IDAMem IDA_mem)
   if (IDA_mem->ida_irfnd == 0) return(IDA_SUCCESS);
 
   (void) IDAGetSolution(IDA_mem, IDA_mem->ida_tlo, IDA_mem->ida_yy, IDA_mem->ida_yp);
-  retval = IDA_mem->ida_gfun(IDA_mem->ida_tlo, IDA_mem->ida_yy, IDA_mem->ida_yp,
-                             IDA_mem->ida_glo, IDA_mem->ida_user_data);
+//  retval = IDA_mem->ida_gfun(IDA_mem->ida_tlo, IDA_mem->ida_yy, IDA_mem->ida_yp,
+//                             IDA_mem->ida_glo, IDA_mem->ida_user_data);
+// use of temporary variable (trout,grout) to detect sign change of g
+  IDA_mem->ida_trout = IDA_mem->ida_tlo;
+  retval = IDA_mem->ida_gfun (IDA_mem->ida_trout, IDA_mem->ida_yy, IDA_mem->ida_yp,
+                              IDA_mem->ida_grout, IDA_mem->ida_user_data);
   IDA_mem->ida_nge++;
   if (retval != 0) return(IDA_RTFUNC_FAIL);
 
@@ -2973,7 +2982,7 @@ static int IDARcheck2(IDAMem IDA_mem)
     IDA_mem->ida_iroots[i] = 0;
   for (i = 0; i < IDA_mem->ida_nrtfn; i++) {
     if (!IDA_mem->ida_gactive[i]) continue;
-    if (SUNRabs(IDA_mem->ida_glo[i]) == ZERO) {
+    if (SUNRabs(IDA_mem->ida_grout[i]) == ZERO) {
       zroot = SUNTRUE;
       IDA_mem->ida_iroots[i] = 1;
     }
@@ -3005,6 +3014,10 @@ static int IDARcheck2(IDAMem IDA_mem)
       if (IDA_mem->ida_iroots[i] == 1) return(CLOSERT);
       zroot = SUNTRUE;
       IDA_mem->ida_iroots[i] = 1;
+    } 
+    else if (IDA_mem->ida_grout[i]*IDA_mem->ida_glo[i] < ZERO) {
+      zroot = SUNTRUE;
+      IDA_mem->ida_iroots[i] = IDA_mem->ida_grout[i] > 0 ? -1 : 1;
     } else {
       if (IDA_mem->ida_iroots[i] == 1)
         IDA_mem->ida_glo[i] = IDA_mem->ida_ghi[i];
diff --git a/src/ida/ida_impl.h b/src/ida/ida_impl.h
index 93b14585..10bd182a 100644
--- a/src/ida/ida_impl.h
+++ b/src/ida/ida_impl.h
@@ -176,6 +176,7 @@ typedef struct IDAMemRec {
   int ida_maxord_alloc;  /* value of maxord used when allocating memory       */
   long int ida_mxstep;   /* max number of internal steps for one user call    */
   realtype ida_hmax_inv; /* inverse of max. step size hmax (default = 0.0)    */
+  realtype ida_hmin;     /* min value of step size                            */
 
   /* Counters */
 
@@ -509,6 +510,7 @@ int idaNlsInit(IDAMem IDA_mem);
 #define MSG_NEG_MAXORD     "maxord <= 0 illegal."
 #define MSG_BAD_MAXORD     "Illegal attempt to increase maximum order."
 #define MSG_NEG_HMAX       "hmax < 0 illegal."
+#define MSG_NEG_HMIN       "hmin < 0 illegal."
 #define MSG_NEG_EPCON      "epcon <= 0.0 illegal."
 #define MSG_BAD_CONSTR     "Illegal values in constraints vector."
 #define MSG_BAD_EPICCON    "epiccon <= 0.0 illegal."
diff --git a/src/ida/ida_io.c b/src/ida/ida_io.c
index 5c1868f8..b9a19ff9 100644
--- a/src/ida/ida_io.c
+++ b/src/ida/ida_io.c
@@ -167,6 +167,32 @@ int IDASetInitStep(void *ida_mem, realtype hin)
 
 /*-----------------------------------------------------------------*/
 
+int IDASetMinStep(void *ida_mem, realtype hmin)
+{
+  IDAMem IDA_mem;
+
+  if (ida_mem==NULL){
+    IDAProcessError(NULL, IDA_MEM_NULL, "IDA", "IDASetMinStep", MSG_NO_MEM);
+    return(IDA_MEM_NULL);
+  }
+
+  IDA_mem = (IDAMem) ida_mem;
+
+  if (hmin < 0) {
+    IDAProcessError(IDA_mem, IDA_ILL_INPUT, "IDA", "IDASetMinStep", MSG_NEG_HMIN);
+    return(IDA_ILL_INPUT);
+  }
+
+  if( hmin == ZERO ){
+    IDA_mem->ida_hmin = ZERO;
+    return (IDA_SUCCESS);
+  }
+  IDA_mem->ida_hmin = hmin;
+  return (IDA_SUCCESS);
+}
+
+/*-----------------------------------------------------------------*/
+
 int IDASetMaxStep(void *ida_mem, realtype hmax)
 {
   IDAMem IDA_mem;
diff --git a/src/kinsol/kinsol.c b/src/kinsol/kinsol.c
index a9ad2e95..02e0c135 100644
--- a/src/kinsol/kinsol.c
+++ b/src/kinsol/kinsol.c
@@ -1111,7 +1111,7 @@ static int KINSolInit(KINMem kin_mem)
   }
 
   fmax = KINScFNorm(kin_mem, kin_mem->kin_fval, kin_mem->kin_fscale);
-  if (fmax <= (POINT01 * kin_mem->kin_fnormtol)) {
+  if (fmax <= (POINT1 * kin_mem->kin_fnormtol)) {
     kin_mem->kin_fnorm = N_VWL2Norm(kin_mem->kin_fval, kin_mem->kin_fscale);
     return(KIN_INITIAL_GUESS_OK);
   }
diff --git a/src/kinsol/kinsol_io.c b/src/kinsol/kinsol_io.c
index 5a5138fb..31468ae0 100644
--- a/src/kinsol/kinsol_io.c
+++ b/src/kinsol/kinsol_io.c
@@ -835,6 +835,8 @@ int KINSetSysFunc(void *kinmem, KINSysFn func)
 #define fnorm (kin_mem->kin_fnorm)
 #define liw (kin_mem->kin_liw)
 #define lrw (kin_mem->kin_lrw)
+#define fval (kin_mem->kin_fval)
+#define fscale (kin_mem->kin_fscale)
 
 /* 
  * =================================================================
@@ -1058,3 +1060,39 @@ char *KINGetReturnFlagName(long int flag)
 
   return(name);
 }
+
+/*
+ * -----------------------------------------------------------------
+ * Function : KINGetResiduals
+ * -----------------------------------------------------------------
+ */
+
+int KINGetResiduals(void *kinmem, N_Vector fvalues)
+{
+  KINMem kin_mem;
+
+  if (kinmem == NULL) {
+    KINProcessError(NULL, KIN_MEM_NULL, "KINSOL", "KINGetResidualFunctionValues", MSG_NO_MEM);
+    return(KIN_MEM_NULL);
+  }
+
+  kin_mem = (KINMem) kinmem;
+  N_VScale(ONE, fval, fvalues);
+
+  return(KIN_SUCCESS);
+}
+
+int KINGetWeights(void *kinmem, N_Vector weights)
+{
+  KINMem kin_mem;
+
+  if (kinmem == NULL) {
+    KINProcessError(NULL, KIN_MEM_NULL, "KINSOL", "KINGetWeights", MSG_NO_MEM);
+    return(KIN_MEM_NULL);
+  }
+
+  kin_mem = (KINMem) kinmem;
+  N_VScale(ONE, fscale, weights);
+
+  return(KIN_SUCCESS);
+}
diff --git a/src/kinsol/kinsol_ls.c b/src/kinsol/kinsol_ls.c
index 8f5f611e..c337984d 100644
--- a/src/kinsol/kinsol_ls.c
+++ b/src/kinsol/kinsol_ls.c
@@ -224,6 +224,7 @@ int KINSetJacFn(void *kinmem, KINLsJacFn jac)
     kinls_mem->jac    = kinLsDQJac;
     kinls_mem->J_data = kin_mem;
   }
+  kinls_mem->nje = 0;
 
   return(KINLS_SUCCESS);
 }
