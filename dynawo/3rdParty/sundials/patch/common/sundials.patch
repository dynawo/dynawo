diff --git a/include/ida/ida.h b/include/ida/ida.h
index 216554ee2..1b8a0d76a 100644
--- a/include/ida/ida.h
+++ b/include/ida/ida.h
@@ -146,6 +146,7 @@ SUNDIALS_EXPORT int IDASetMaxErrTestFails(void *ida_mem, int maxnef);
 SUNDIALS_EXPORT int IDASetSuppressAlg(void *ida_mem, booleantype suppressalg);
 SUNDIALS_EXPORT int IDASetId(void *ida_mem, N_Vector id);
 SUNDIALS_EXPORT int IDASetConstraints(void *ida_mem, N_Vector constraints);
+SUNDIALS_EXPORT int IDASetURound(void *ida_mem, realtype uround);
 
 /* Optional step adaptivity input functions */
 SUNDIALS_EXPORT
diff --git a/include/kinsol/kinsol.h b/include/kinsol/kinsol.h
index f2e98e3a6..137b2c721 100644
--- a/include/kinsol/kinsol.h
+++ b/include/kinsol/kinsol.h
@@ -132,6 +132,7 @@ SUNDIALS_EXPORT int KINSetFuncNormTol(void *kinmem, realtype fnormtol);
 SUNDIALS_EXPORT int KINSetScaledStepTol(void *kinmem, realtype scsteptol);
 SUNDIALS_EXPORT int KINSetConstraints(void *kinmem, N_Vector constraints);
 SUNDIALS_EXPORT int KINSetSysFunc(void *kinmem, KINSysFn func);
+SUNDIALS_EXPORT int KINSetInitialAdditionalTolerance(void *kinmem, realtype initialaddtol);
 
 /* Optional input functions for handling error/info/debug events */
 SUNDIALS_EXPORT int KINSetErrHandlerFn(void *kinmem, KINErrHandlerFn ehfun,
diff --git a/src/ida/ida.c b/src/ida/ida.c
index a9a0e1b8f..c5b474383 100644
--- a/src/ida/ida.c
+++ b/src/ida/ida.c
@@ -3329,8 +3329,10 @@ static int IDARcheck2(IDAMem IDA_mem)
   if (IDA_mem->ida_irfnd == 0) return(IDA_SUCCESS);
 
   (void) IDAGetSolution(IDA_mem, IDA_mem->ida_tlo, IDA_mem->ida_yy, IDA_mem->ida_yp);
-  retval = IDA_mem->ida_gfun(IDA_mem->ida_tlo, IDA_mem->ida_yy, IDA_mem->ida_yp,
-                             IDA_mem->ida_glo, IDA_mem->ida_user_data);
+  // use of temporary variable (trout,grout) to detect sign change of g
+  IDA_mem->ida_trout = IDA_mem->ida_tlo;
+  retval = IDA_mem->ida_gfun(IDA_mem->ida_trout, IDA_mem->ida_yy, IDA_mem->ida_yp,
+                             IDA_mem->ida_grout, IDA_mem->ida_user_data);
   IDA_mem->ida_nge++;
   if (retval != 0) return(IDA_RTFUNC_FAIL);
 
@@ -3339,7 +3341,7 @@ static int IDARcheck2(IDAMem IDA_mem)
     IDA_mem->ida_iroots[i] = 0;
   for (i = 0; i < IDA_mem->ida_nrtfn; i++) {
     if (!IDA_mem->ida_gactive[i]) continue;
-    if (SUNRabs(IDA_mem->ida_glo[i]) == ZERO) {
+    if (SUNRabs(IDA_mem->ida_grout[i]) == ZERO) {
       zroot = SUNTRUE;
       IDA_mem->ida_iroots[i] = 1;
     }
@@ -3372,6 +3374,10 @@ static int IDARcheck2(IDAMem IDA_mem)
       if (IDA_mem->ida_iroots[i] == 1) return(CLOSERT);
       zroot = SUNTRUE;
       IDA_mem->ida_iroots[i] = 1;
+    }
+    else if (IDA_mem->ida_grout[i]*IDA_mem->ida_glo[i] < ZERO) {
+      zroot = SUNTRUE;
+      IDA_mem->ida_iroots[i] = IDA_mem->ida_grout[i] > 0 ? -1 : 1;
     } else {
       if (IDA_mem->ida_iroots[i] == 1)
         IDA_mem->ida_glo[i] = IDA_mem->ida_ghi[i];
diff --git a/src/ida/ida_io.c b/src/ida/ida_io.c
index 0e651a27e..7a6083ea8 100644
--- a/src/ida/ida_io.c
+++ b/src/ida/ida_io.c
@@ -822,6 +822,22 @@ int IDASetStepToleranceIC(void *ida_mem, realtype steptol)
   return(IDA_SUCCESS);
 }
 
+int IDASetURound(void *ida_mem, realtype uround)
+{
+  IDAMem IDA_mem;
+
+  if (ida_mem==NULL) {
+    IDAProcessError(NULL, IDA_MEM_NULL, "IDA", "IDASetURound", MSG_NO_MEM);
+    return(IDA_MEM_NULL);
+  }
+
+  IDA_mem = (IDAMem) ida_mem;
+
+  IDA_mem->ida_uround = uround;
+
+  return(IDA_SUCCESS);
+}
+
 /*
  * =================================================================
  * IDA optional input functions
diff --git a/src/kinsol/kinsol.c b/src/kinsol/kinsol.c
index c1b392898..921436219 100644
--- a/src/kinsol/kinsol.c
+++ b/src/kinsol/kinsol.c
@@ -290,6 +290,7 @@ void *KINCreate(SUNContext sunctx)
   kin_mem->kin_sqrt_relfunc     = SUNRsqrt(uround);
   kin_mem->kin_scsteptol        = SUNRpowerR(uround,TWOTHIRDS);
   kin_mem->kin_fnormtol         = SUNRpowerR(uround,ONETHIRD);
+  kin_mem->kin_initialaddtol    = POINT1;
   kin_mem->kin_etaflag          = KIN_ETACHOICE1;
   kin_mem->kin_eta              = POINT1;     /* default for KIN_ETACONSTANT */
   kin_mem->kin_eta_alpha        = TWO;        /* default for KIN_ETACHOICE2  */
@@ -1467,7 +1468,7 @@ static int KINSolInit(KINMem kin_mem)
   }
 
   fmax = KINScFNorm(kin_mem, kin_mem->kin_fval, kin_mem->kin_fscale);
-  if (fmax <= (POINT01 * kin_mem->kin_fnormtol)) {
+  if (fmax <= (kin_mem->kin_initialaddtol*kin_mem->kin_fnormtol)) {
     kin_mem->kin_fnorm = N_VWL2Norm(kin_mem->kin_fval, kin_mem->kin_fscale);
     return(KIN_INITIAL_GUESS_OK);
   }
diff --git a/src/kinsol/kinsol_impl.h b/src/kinsol/kinsol_impl.h
index c4a821c7a..30e3bdff9 100644
--- a/src/kinsol/kinsol_impl.h
+++ b/src/kinsol/kinsol_impl.h
@@ -87,6 +87,7 @@ typedef struct KINMemRec {
   void *kin_user_data;         /* work space available to func routine         */
   realtype kin_fnormtol;       /* stopping tolerance on L2-norm of function
                                   value                                        */
+  realtype kin_initialaddtol;  /* stopping tolerance on initialization         */
   realtype kin_scsteptol;      /* scaled step length tolerance                 */
   int kin_globalstrategy;      /* choices are KIN_NONE, KIN_LINESEARCH
                                   KIN_PICARD and KIN_FP                        */
@@ -443,6 +444,7 @@ void KINInfoHandler(const char *module, const char *function,
 #define MSG_BAD_MXNEWTSTEP     "Illegal mxnewtstep < 0."
 #define MSG_BAD_RELFUNC        "relfunc < 0 illegal."
 #define MSG_BAD_FNORMTOL       "fnormtol < 0 illegal."
+#define MSG_BAD_INITADDTOL     "initialaddtol < 0 illegal."
 #define MSG_BAD_SCSTEPTOL      "scsteptol < 0 illegal."
 #define MSG_BAD_MXNBCF         "mxbcf < 0 illegal."
 #define MSG_BAD_CONSTRAINTS    "Illegal values in constraints vector."
diff --git a/src/kinsol/kinsol_io.c b/src/kinsol/kinsol_io.c
index 812dabad9..e2341f802 100644
--- a/src/kinsol/kinsol_io.c
+++ b/src/kinsol/kinsol_io.c
@@ -856,6 +856,37 @@ int KINSetFuncNormTol(void *kinmem, realtype fnormtol)
   return(KIN_SUCCESS);
 }
 
+// Function : KINSetInitialAdditionalTolerance
+
+int KINSetInitialAdditionalTolerance(void *kinmem, realtype initialaddtol)
+{
+  KINMem kin_mem;
+  realtype uround;
+
+  if (kinmem == NULL) {
+    KINProcessError(NULL, KIN_MEM_NULL, "KINSOL", "KINSetInitialAdditionalTolerance", MSG_NO_MEM);
+    return(KIN_MEM_NULL);
+  }
+
+  kin_mem = (KINMem) kinmem;
+
+  if (initialaddtol < ZERO) {
+    KINProcessError(NULL, KIN_ILL_INPUT, "KINSOL", "KINSetInitialAdditionalTolerance", MSG_BAD_INITADDTOL);
+    return(KIN_ILL_INPUT);
+  }
+
+  if (initialaddtol == ZERO) {
+    uround = kin_mem->kin_uround;
+    kin_mem->kin_initialaddtol = SUNRpowerR(uround,ONETHIRD);
+  } else {
+    kin_mem->kin_initialaddtol = initialaddtol;
+  }
+
+  return(KIN_SUCCESS);
+}
+
+// End KINSetInitialAdditionalTolerance
+
 /*
  * -----------------------------------------------------------------
  * Function : KINSetScaledStepTol
diff --git a/src/kinsol/kinsol_ls.c b/src/kinsol/kinsol_ls.c
index aaea6ca63..3ca2038ca 100644
--- a/src/kinsol/kinsol_ls.c
+++ b/src/kinsol/kinsol_ls.c
@@ -248,6 +248,8 @@ int KINSetJacFn(void *kinmem, KINLsJacFn jac)
     kinls_mem->J_data = kin_mem;
   }
 
+  kinls_mem->nje = 0;
+
   return(KINLS_SUCCESS);
 }
 
