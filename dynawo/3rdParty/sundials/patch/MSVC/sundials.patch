diff -urpN sundials-6.3.0/src/sunlinsol/klu/sunlinsol_klu.c sundials-6.3.0_patched/src/sunlinsol/klu/sunlinsol_klu.c
--- sundials-6.3.0/src/sunlinsol/klu/sunlinsol_klu.c	2022-08-11 06:34:01.000000000 +0200
+++ sundials-6.3.0_patched/src/sunlinsol/klu/sunlinsol_klu.c	2023-11-23 09:02:34.702421525 +0100
@@ -48,7 +48,7 @@
  */
 
 #if defined(SUNDIALS_INT64_T)
-#define KLU_INDEXTYPE long int
+#define KLU_INDEXTYPE SuiteSparse_long
 #else
 #define KLU_INDEXTYPE int
 #endif
@@ -126,7 +126,7 @@ SUNLinearSolver SUNLinSol_KLU(N_Vector y
 #error  Incompatible sunindextype for KLU
 #endif
 
-  flag = sun_klu_defaults(&(content->common));
+  flag = (int)sun_klu_defaults(&(content->common));
   if (flag == 0) { SUNLinSolFree(S); return(NULL); }
   (content->common).ordering = SUNKLU_ORDERING_DEFAULT;
 
@@ -288,7 +288,7 @@ int SUNLinSolSetup_KLU(SUNLinearSolver S
 
   } else {   /* not the first decomposition, so just refactor */
 
-    retval = sun_klu_refactor((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
+    retval = (int)sun_klu_refactor((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
                               (KLU_INDEXTYPE*) SUNSparseMatrix_IndexValues(A),
                               SUNSparseMatrix_Data(A),
                               SYMBOLIC(S),
@@ -305,7 +305,7 @@ int SUNLinSolSetup_KLU(SUNLinearSolver S
       the prior numeric factorization and recompute it.
       -----------------------------------------------------------*/
 
-    retval = sun_klu_rcond(SYMBOLIC(S), NUMERIC(S), &COMMON(S));
+    retval = (int)sun_klu_rcond(SYMBOLIC(S), NUMERIC(S), &COMMON(S));
     if (retval == 0) {
       LASTFLAG(S) = SUNLS_PACKAGE_FAIL_REC;
       return(LASTFLAG(S));
@@ -315,7 +315,7 @@ int SUNLinSolSetup_KLU(SUNLinearSolver S
 
       /* Condition number may be getting large.
 	 Compute more accurate estimate */
-      retval = sun_klu_condest((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
+      retval = (int)sun_klu_condest((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
                                SUNSparseMatrix_Data(A),
                                SYMBOLIC(S),
                                NUMERIC(S),
@@ -370,7 +370,7 @@ int SUNLinSolSolve_KLU(SUNLinearSolver S
   }
 
   /* Call KLU to solve the linear system */
-  flag = SOLVE(S)(SYMBOLIC(S), NUMERIC(S),
+  flag = (int)SOLVE(S)(SYMBOLIC(S), NUMERIC(S),
                   SUNSparseMatrix_NP(A), 1, xdata,
                   &COMMON(S));
   if (flag == 0) {
