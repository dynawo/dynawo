diff '--exclude=.vscode' -urpN sundials-5.3.0/CMakeLists.txt sundials-5.3.0_new/CMakeLists.txt
--- sundials-5.3.0/CMakeLists.txt	2020-05-21 19:22:51.000000000 +0200
+++ sundials-5.3.0_new/CMakeLists.txt	2020-11-04 14:53:42.348256560 +0100
@@ -23,10 +23,25 @@
 # to require CMake 3.10
 cmake_minimum_required(VERSION 3.5)
 
+if(${CMAKE_VERSION} VERSION_GREATER "3.15.0")
+  if(POLICY CMP0091)
+    cmake_policy(SET CMP0091 NEW)
+  endif()
+endif()
+
 # Project SUNDIALS (initially only C supported)
 # sets PROJECT_SOURCE_DIR and PROJECT_BINARY_DIR variables
 project(sundials C)
 
+set(MSVC_STATIC_RUNTIME_LIBRARY OFF CACHE BOOL "Choose either ON or OFF.")
+if(MSVC)
+  if(BUILD_STATIC_LIBS)
+	  if(MSVC_STATIC_RUNTIME_LIBRARY)
+      set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
+	  endif()
+  endif()
+endif()
+
 # Set some variables with info on the SUNDIALS project
 set(PACKAGE_BUGREPORT "woodward6@llnl.gov")
 set(PACKAGE_NAME "SUNDIALS")
diff '--exclude=.vscode' -urpN sundials-5.3.0/src/sunlinsol/klu/sunlinsol_klu.c sundials-5.3.0_new/src/sunlinsol/klu/sunlinsol_klu.c
--- sundials-5.3.0/src/sunlinsol/klu/sunlinsol_klu.c	2020-05-21 19:22:53.000000000 +0200
+++ sundials-5.3.0_new/src/sunlinsol/klu/sunlinsol_klu.c	2020-11-04 16:10:03.040485452 +0100
@@ -48,7 +48,7 @@
  */
 
 #if defined(SUNDIALS_INT64_T)
-#define KLU_INDEXTYPE long int
+#define KLU_INDEXTYPE SuiteSparse_long
 #else
 #define KLU_INDEXTYPE int
 #endif
@@ -143,7 +143,7 @@ SUNLinearSolver SUNLinSol_KLU(N_Vector y
 #error  Incompatible sunindextype for KLU
 #endif
 
-  flag = sun_klu_defaults(&(content->common));
+  flag = (int)sun_klu_defaults(&(content->common));
   if (flag == 0) { SUNLinSolFree(S); return(NULL); }
   (content->common).ordering = SUNKLU_ORDERING_DEFAULT;
 
@@ -305,7 +305,7 @@ int SUNLinSolSetup_KLU(SUNLinearSolver S
 
   } else {   /* not the first decomposition, so just refactor */
 
-    retval = sun_klu_refactor((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
+    retval = (int)sun_klu_refactor((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
                               (KLU_INDEXTYPE*) SUNSparseMatrix_IndexValues(A),
                               SUNSparseMatrix_Data(A),
                               SYMBOLIC(S),
@@ -322,7 +322,7 @@ int SUNLinSolSetup_KLU(SUNLinearSolver S
       the prior numeric factorization and recompute it.
       -----------------------------------------------------------*/
 
-    retval = sun_klu_rcond(SYMBOLIC(S), NUMERIC(S), &COMMON(S));
+    retval = (int)sun_klu_rcond(SYMBOLIC(S), NUMERIC(S), &COMMON(S));
     if (retval == 0) {
       LASTFLAG(S) = SUNLS_PACKAGE_FAIL_REC;
       return(LASTFLAG(S));
@@ -332,7 +332,7 @@ int SUNLinSolSetup_KLU(SUNLinearSolver S
 
       /* Condition number may be getting large.
 	 Compute more accurate estimate */
-      retval = sun_klu_condest((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
+      retval = (int)sun_klu_condest((KLU_INDEXTYPE*) SUNSparseMatrix_IndexPointers(A),
                                SUNSparseMatrix_Data(A),
                                SYMBOLIC(S),
                                NUMERIC(S),
@@ -387,7 +387,7 @@ int SUNLinSolSolve_KLU(SUNLinearSolver S
   }
 
   /* Call KLU to solve the linear system */
-  flag = SOLVE(S)(SYMBOLIC(S), NUMERIC(S),
+  flag = (int)SOLVE(S)(SYMBOLIC(S), NUMERIC(S),
                   SUNSparseMatrix_NP(A), 1, xdata,
                   &COMMON(S));
   if (flag == 0) {
