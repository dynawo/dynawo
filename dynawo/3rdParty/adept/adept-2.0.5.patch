# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# Patch for Adept 2.0.5 (http://www.met.reading.ac.uk/clouds/adept/)
# 
# All rights reserved.
# 
# For details, see the Sundials LICENSE file.
# SPDX-License-Identifier: BSD-3-Clause
diff -urpN adept-2.0.5/include/adept/Active.h adept-2.0.5_patched/include/adept/Active.h
--- adept-2.0.5/include/adept/Active.h	2018-02-06 22:41:30.000000000 +0100
+++ adept-2.0.5_patched/include/adept/Active.h	2019-07-22 13:39:35.199730672 +0200
@@ -491,27 +491,27 @@ namespace adept {
     { return val_; }
     
     template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch>
-    Type value_at_location_store_(const ExpressionSize<NArrays>& loc,
-				ScratchVector<NScratch>& scratch) const
+    Type value_at_location_store_(const ExpressionSize<NArrays>&,
+				ScratchVector<NScratch>&) const
     { return val_; }
 
     template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch>
-    Type value_stored_(const ExpressionSize<NArrays>& loc,
-		     const ScratchVector<NScratch>& scratch) const
+    Type value_stored_(const ExpressionSize<NArrays>&,
+		     const ScratchVector<NScratch>&) const
     { return val_; }
 
     template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch>
-    void calc_gradient_(Stack& stack, 
-			const ExpressionSize<NArrays>& loc,
-			const ScratchVector<NScratch>& scratch) const {
+    void calc_gradient_(Stack& stack,
+			const ExpressionSize<NArrays>&,
+			const ScratchVector<NScratch>&) const {
       stack.push_rhs(1.0, gradient_index_);
     }
 
     template <int MyArrayNum, int MyScratchNum, 
 	      int NArrays, int NScratch, typename MyType>
-    void calc_gradient_(Stack& stack, 
-			const ExpressionSize<NArrays>& loc,
-			const ScratchVector<NScratch>& scratch,
+    void calc_gradient_(Stack& stack,
+			const ExpressionSize<NArrays>&,
+			const ScratchVector<NScratch>&,
 			const MyType& multiplier) const {
       stack.push_rhs(multiplier, gradient_index_);
     }
diff -urpN adept-2.0.5/include/adept/BinaryOperation.h adept-2.0.5_patched/include/adept/BinaryOperation.h
--- adept-2.0.5/include/adept/BinaryOperation.h	2018-02-06 23:52:55.000000000 +0100
+++ adept-2.0.5_patched/include/adept/BinaryOperation.h	2019-07-22 13:40:04.219979017 +0200
@@ -786,14 +786,14 @@ namespace adept {
       
       // Calculate the gradient of the left-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_left(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_left(Stack& stack, const L& left, const R&, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         left.template calc_gradient_<MyArrayNum, MyScratchNum+store_result>(stack, loc, scratch);
       }
 
       // Calculate the gradient of the right-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_right(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_right(Stack& stack, const L&, const R& right, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         right.template calc_gradient_<MyArrayNum+L::n_arrays, MyScratchNum+L::n_scratch+store_result>(stack, loc, scratch);
       }
@@ -828,14 +828,14 @@ namespace adept {
       
       // Calculate the gradient of the left-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_left(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_left(Stack& stack, const L& left, const R&, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         left.template calc_gradient_<MyArrayNum, MyScratchNum+store_result>(stack, loc, scratch);
       }
 
       // Calculate the gradient of the right-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_right(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_right(Stack& stack, const L&, const R& right, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         right.template calc_gradient_<MyArrayNum+L::n_arrays, MyScratchNum+L::n_scratch+store_result>(stack, loc, scratch, -1.0);
       }
diff -urpN adept-2.0.5/include/adept/Expression.h adept-2.0.5_patched/include/adept/Expression.h
--- adept-2.0.5/include/adept/Expression.h	2017-10-29 08:02:20.000000000 +0100
+++ adept-2.0.5_patched/include/adept/Expression.h	2019-07-18 09:33:45.111656516 +0200
@@ -152,7 +152,7 @@ namespace adept {
     }
   
     Type 
-    scalar_value_and_gradient(Stack& stack) const {
+    scalar_value_and_gradient(Stack&) const {
       internal::ScratchVector<A::n_scratch> scratch;
       ExpressionSize<0> dummy_index;
       Type val = cast().template value_at_location_store_<0,0>(dummy_index, scratch);
