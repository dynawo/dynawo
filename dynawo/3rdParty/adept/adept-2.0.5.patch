# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# Patch for Adept 2.0.5 (http://www.met.reading.ac.uk/clouds/adept/)
# 
# All rights reserved.
# 
# For details, see the Sundials LICENSE file.
# SPDX-License-Identifier: BSD-3-Clause
diff -urpN adept-2.0.5/include/adept/Active.h adept-2.0.5_patched/include/adept/Active.h
--- adept-2.0.5/include/adept/Active.h	2018-02-06 22:41:30.000000000 +0100
+++ adept-2.0.5_patched/include/adept/Active.h	2019-07-25 09:31:55.708768622 +0200
@@ -78,7 +78,7 @@ namespace adept {
     //   aReal x(1.0);
     template <typename PType>
     Active(const PType& rhs,
-	   typename enable_if<is_not_expression<PType>::value>::type* dummy = 0)
+	   typename enable_if<is_not_expression<PType>::value>::type* = 0)
       : val_(rhs), gradient_index_(ADEPT_ACTIVE_STACK->register_gradient())
     {
       // By pushing this to the statement stack without pushing
@@ -487,31 +487,31 @@ namespace adept {
     void advance_location_(ExpressionSize<NArrays>& loc) const { } 
 
     template <int MyArrayNum, int NArrays>
-    Type value_at_location_(const ExpressionSize<NArrays>& loc) const
+    Type value_at_location_(const ExpressionSize<NArrays>&) const
     { return val_; }
     
     template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch>
-    Type value_at_location_store_(const ExpressionSize<NArrays>& loc,
-				ScratchVector<NScratch>& scratch) const
+    Type value_at_location_store_(const ExpressionSize<NArrays>&,
+				ScratchVector<NScratch>&) const
     { return val_; }
 
     template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch>
-    Type value_stored_(const ExpressionSize<NArrays>& loc,
-		     const ScratchVector<NScratch>& scratch) const
+    Type value_stored_(const ExpressionSize<NArrays>&,
+		     const ScratchVector<NScratch>&) const
     { return val_; }
 
     template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch>
-    void calc_gradient_(Stack& stack, 
-			const ExpressionSize<NArrays>& loc,
-			const ScratchVector<NScratch>& scratch) const {
+    void calc_gradient_(Stack& stack,
+			const ExpressionSize<NArrays>&,
+			const ScratchVector<NScratch>&) const {
       stack.push_rhs(1.0, gradient_index_);
     }
 
     template <int MyArrayNum, int MyScratchNum, 
 	      int NArrays, int NScratch, typename MyType>
-    void calc_gradient_(Stack& stack, 
-			const ExpressionSize<NArrays>& loc,
-			const ScratchVector<NScratch>& scratch,
+    void calc_gradient_(Stack& stack,
+			const ExpressionSize<NArrays>&,
+			const ScratchVector<NScratch>&,
 			const MyType& multiplier) const {
       stack.push_rhs(multiplier, gradient_index_);
     }
diff -urpN adept-2.0.5/include/adept/BinaryOperation.h adept-2.0.5_patched/include/adept/BinaryOperation.h
--- adept-2.0.5/include/adept/BinaryOperation.h	2018-02-06 23:52:55.000000000 +0100
+++ adept-2.0.5_patched/include/adept/BinaryOperation.h	2019-07-25 09:16:53.060165680 +0200
@@ -786,14 +786,14 @@ namespace adept {
       
       // Calculate the gradient of the left-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_left(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_left(Stack& stack, const L& left, const R&, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         left.template calc_gradient_<MyArrayNum, MyScratchNum+store_result>(stack, loc, scratch);
       }
 
       // Calculate the gradient of the right-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_right(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_right(Stack& stack, const L&, const R& right, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         right.template calc_gradient_<MyArrayNum+L::n_arrays, MyScratchNum+L::n_scratch+store_result>(stack, loc, scratch);
       }
@@ -828,14 +828,14 @@ namespace adept {
       
       // Calculate the gradient of the left-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_left(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_left(Stack& stack, const L& left, const R&, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         left.template calc_gradient_<MyArrayNum, MyScratchNum+store_result>(stack, loc, scratch);
       }
 
       // Calculate the gradient of the right-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_right(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_right(Stack& stack, const L&, const R& right, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
         right.template calc_gradient_<MyArrayNum+L::n_arrays, MyScratchNum+L::n_scratch+store_result>(stack, loc, scratch, -1.0);
       }
@@ -924,7 +924,7 @@ namespace adept {
       
       // Calculate the gradient of the left-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_left(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_left(Stack& stack, const L& left, const R&, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
 	// If f(a,b) = a/b then df/da = 1/b
 	// If store_result==1 then do this:
@@ -937,7 +937,7 @@ namespace adept {
 
       // Calculate the gradient of the right-hand argument
       template <int MyArrayNum, int MyScratchNum, int NArrays, int NScratch, class L, class R>
-      void calc_right(Stack& stack, const L& left, const R& right, const ExpressionSize<NArrays>& loc,
+      void calc_right(Stack& stack, const L&, const R& right, const ExpressionSize<NArrays>& loc,
 			       const ScratchVector<NScratch>& scratch) const {
 	// If f(a,b) = a/b then df/db = -a/(b*b) = -f/b
 	// If store_result==1 then do this:
diff -urpN adept-2.0.5/include/adept/Expression.h adept-2.0.5_patched/include/adept/Expression.h
--- adept-2.0.5/include/adept/Expression.h	2017-10-29 08:02:20.000000000 +0100
+++ adept-2.0.5_patched/include/adept/Expression.h	2019-07-18 09:33:45.111656516 +0200
@@ -152,7 +152,7 @@ namespace adept {
     }
   
     Type 
-    scalar_value_and_gradient(Stack& stack) const {
+    scalar_value_and_gradient(Stack&) const {
       internal::ScratchVector<A::n_scratch> scratch;
       ExpressionSize<0> dummy_index;
       Type val = cast().template value_at_location_store_<0,0>(dummy_index, scratch);
diff -urpN adept-2.0.5/include/adept/UnaryOperation.h adept-2.0.5_patched/include/adept/UnaryOperation.h
--- adept-2.0.5/include/adept/UnaryOperation.h	2018-01-10 11:24:08.000000000 +0100
+++ adept-2.0.5_patched/include/adept/UnaryOperation.h	2019-07-23 09:41:36.635081010 +0200
@@ -226,6 +226,39 @@ namespace adept {
 				   adept::internal::NAME, R>(r.cast()); \
   }
 
+#define ADEPT_DEF_UNARY_FUNC_FIXED_DERIVATIVE(NAME, FUNC, RAWFUNC, STRING, DERIVATIVE, \
+           ISVEC)         \
+  namespace internal {              \
+    template <typename Type>            \
+    struct NAME  {              \
+      static const bool is_operator = false;        \
+      static const bool is_vectorized = ISVEC;        \
+      const char* operation_string() const { return STRING; }   \
+      template <typename T>           \
+      T operation(const T& val) const {         \
+  using RAWFUNC;              \
+  return FUNC(val);           \
+      }                 \
+      Type derivative(const Type&, const Type&) const {  \
+  using std::sin;             \
+  using std::cos;             \
+  using std::sqrt;            \
+  using std::cosh;            \
+  using std::sinh;            \
+  using std::exp;             \
+  return DERIVATIVE;            \
+      }                 \
+      Type fast_sqr(Type val) const { return val*val; }     \
+    };                  \
+  } /* End namespace internal */          \
+  template <class Type, class R>          \
+  inline                \
+  adept::internal::UnaryOperation<Type, adept::internal::NAME, R> \
+  FUNC(const adept::Expression<Type, R>& r) {     \
+    return adept::internal::UnaryOperation<Type,      \
+           adept::internal::NAME, R>(r.cast()); \
+  }
+
   // Functions y(x) whose derivative depends on the argument of the
   // function, i.e. dy(x)/dx = f(x)
   ADEPT_DEF_UNARY_FUNC(Log,   log,   std::log,   "log",   1.0/val, false)
@@ -248,8 +281,8 @@ namespace adept {
   ADEPT_DEF_UNARY_FUNC(Tanh,  tanh,  std::tanh,  "tanh",  1.0 - result*result, false)
 
   // Functions with zero derivative
-  ADEPT_DEF_UNARY_FUNC(Ceil,  ceil,  std::ceil,  "ceil",  0.0, false)
-  ADEPT_DEF_UNARY_FUNC(Floor, floor, std::floor, "floor", 0.0, false)
+  ADEPT_DEF_UNARY_FUNC_FIXED_DERIVATIVE(Ceil,  ceil,  std::ceil,  "ceil",  0.0, false)
+  ADEPT_DEF_UNARY_FUNC_FIXED_DERIVATIVE(Floor, floor, std::floor, "floor", 0.0, false)
   
   // Functions defined in the std namespace in C++11 but only in the
   // global namespace before that
