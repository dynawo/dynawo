# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# Patch for OpenModelica 1.13.2 (https://www.openmodelica.org)
# 
# All rights reserved.
# 
# THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
# THIS OSMC PUBLIC LICENSE (OSMC-PL) VERSION 1.2.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE
# OF THE OSMC PUBLIC LICENSE OR THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
# 
# The OpenModelica software and the Open Source Modelica
# Consortium (OSMC) Public License (OSMC-PL) are obtained
# from OSMC, either from the above address,
# from the URLs: http://www.ida.liu.se/projects/OpenModelica or
# http://www.openmodelica.org, and in the OpenModelica distribution.
# GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
# 
# This program is distributed WITHOUT ANY WARRANTY; without
# even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
# IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF OSMC-PL.
# 
# See the full OSMC Public License conditions for more details.
# SPDX-License-Identifier: GPL-3.0 OR LicenseRef-OSMC-PL
Index: OMCompiler/Compiler/NFFrontEnd/NFConvertDAE.mo
===================================================================
--- OMCompiler/Compiler/NFFrontEnd/NFConvertDAE.mo.orig	2019-04-10 11:01:07.754188543 +0200
+++ OMCompiler/Compiler/NFFrontEnd/NFConvertDAE.mo	2019-04-11 11:31:12.982547224 +0200
@@ -91,20 +91,37 @@ algorithm
 end convert;
 
 protected
+uniontype VariableConversionSettings
+  record VARIABLE_CONVERSION_SETTINGS
+    Boolean useLocalDirection;
+    Boolean isFunctionParameter;
+    Boolean addTypeToSource;
+  end VARIABLE_CONVERSION_SETTINGS;
+end VariableConversionSettings;
+
+constant VariableConversionSettings FUNCTION_VARIABLE_CONVERSION_SETTINGS =
+  VARIABLE_CONVERSION_SETTINGS(false, true, false);
+
 function convertVariables
   input list<Variable> variables;
   input output list<DAE.Element> elements;
 protected
-  Boolean localDir = Flags.getConfigBool(Flags.USE_LOCAL_DIRECTION);
+  VariableConversionSettings settings;
 algorithm
+  settings := VariableConversionSettings.VARIABLE_CONVERSION_SETTINGS(
+    useLocalDirection = Flags.getConfigBool(Flags.USE_LOCAL_DIRECTION),
+    isFunctionParameter = false,
+    addTypeToSource = Flags.isSet(Flags.INFO_XML_OPERATIONS) or Flags.isSet(Flags.VISUAL_XML)
+  );
+
   for var in listReverse(variables) loop
-    elements := convertVariable(var, localDir) :: elements;
+  elements := convertVariable(var, settings) :: elements;
   end for;
 end convertVariables;
 
 function convertVariable
   input Variable var;
-  input Boolean useLocalDir;
+  input VariableConversionSettings settings;
   output DAE.Element daeVar;
 protected
   Option<DAE.VariableAttributes> var_attr;
@@ -113,7 +130,7 @@ algorithm
   binding_exp := Binding.toDAEExp(var.binding);
   var_attr := convertVarAttributes(var.typeAttributes, var.ty, var.attributes);
   daeVar := makeDAEVar(var.name, var.ty, binding_exp, var.attributes,
-    var.visibility, var_attr, var.comment, useLocalDir, false, var.info);
+    var.visibility, var_attr, var.comment, settings, var.info);
 end convertVariable;
 
 function makeDAEVar
@@ -124,8 +141,7 @@ function makeDAEVar
   input Visibility vis;
   input Option<DAE.VariableAttributes> vattr;
   input Option<SCode.Comment> comment;
-  input Boolean useLocalDir;
-  input Boolean isFunctionParam;
+  input VariableConversionSettings settings;
   input SourceInfo info;
   output DAE.Element var;
 protected
@@ -135,15 +151,19 @@ protected
   Direction dir;
 algorithm
   dcref := ComponentRef.toDAE(cref);
-  dty := Type.toDAE(if isFunctionParam then Type.arrayElementType(ty) else ty);
+  dty := Type.toDAE(if settings.isFunctionParameter then Type.arrayElementType(ty) else ty);
   source := ElementSource.createElementSource(info);
 
+  if settings.addTypeToSource then
+    source := addComponentTypeToSource(cref, source);
+  end if;
+
   var := match attr
     case Component.Attributes.ATTRIBUTES()
       algorithm
         // Strip input/output from non top-level components unless
         // --useLocalDirection=true has been set.
-        if attr.direction == Direction.NONE or useLocalDir then
+        if attr.direction == Direction.NONE or settings.useLocalDirection then
           dir := attr.direction;
         else
           dir := getComponentDirection(attr.direction, cref);
@@ -174,6 +194,22 @@ algorithm
   end match;
 end makeDAEVar;
 
+function addComponentTypeToSource
+  input ComponentRef cref;
+  input output DAE.ElementSource source;
+algorithm
+  source := match cref
+    case ComponentRef.CREF()
+      algorithm
+        source := ElementSource.addElementSourceType(source,
+          InstNode.scopePath(InstNode.classScope(InstNode.parent(cref.node))));
+      then
+        addComponentTypeToSource(cref.restCref, source);
+
+    else source;
+  end match;
+end addComponentTypeToSource;
+
 function getComponentDirection
   "Returns the given direction if the cref refers to a top-level component or to
    a component in a top-level connector, otherwise returns Direction.NONE."
@@ -1006,7 +1042,8 @@ algorithm
         attr := comp.attributes;
         var_attr := convertVarAttributes(ty_attr, ty, attr);
       then
-        makeDAEVar(cref, ty, binding, attr, InstNode.visibility(node), var_attr, comp.comment, true, true, info);
+        makeDAEVar(cref, ty, binding, attr, InstNode.visibility(node), var_attr,
+          comp.comment, FUNCTION_VARIABLE_CONVERSION_SETTINGS, info);
 
     else
       algorithm
