# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# Patch for OpenModelica 1.13.2 (https://www.openmodelica.org)
# 
# All rights reserved.
# 
# THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR
# THIS OSMC PUBLIC LICENSE (OSMC-PL) VERSION 1.2.
# ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE
# OF THE OSMC PUBLIC LICENSE OR THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE.
# 
# The OpenModelica software and the Open Source Modelica
# Consortium (OSMC) Public License (OSMC-PL) are obtained
# from OSMC, either from the above address,
# from the URLs: http://www.ida.liu.se/projects/OpenModelica or
# http://www.openmodelica.org, and in the OpenModelica distribution.
# GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
# 
# This program is distributed WITHOUT ANY WARRANTY; without
# even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
# IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF OSMC-PL.
# 
# See the full OSMC Public License conditions for more details.
# SPDX-License-Identifier: GPL-3.0 OR LicenseRef-OSMC-PL
Index: OMCompiler/Compiler/SimCode/SimCodeUtil.mo
===================================================================
--- OMCompiler/Compiler/SimCode/SimCodeUtil.mo.orig	2019-04-25 10:52:01.642235990 +0200
+++ OMCompiler/Compiler/SimCode/SimCodeUtil.mo	2019-05-07 09:44:06.849903945 +0200
@@ -7194,36 +7194,50 @@ algorithm
     SimCodeVar.AliasVariable aliasvar;
     String s1, s2, s3, sProt, sRes;
     list<String> numArrayElement;
-    case (SimCodeVar.SIMVAR(name= name, aliasvar = SimCodeVar.NOALIAS(), index = i, initialValue=init, arrayCref=arrCref, variable_index=variable_index, numArrayElement=numArrayElement, isProtected=isProtected, hideResult=hideResult))
+    DAE.Type type_;
+    case (SimCodeVar.SIMVAR(name= name, aliasvar = SimCodeVar.NOALIAS(), index = i, initialValue=init, arrayCref=arrCref, variable_index=variable_index, numArrayElement=numArrayElement, isProtected=isProtected, hideResult=hideResult, type_=type_))
     equation
         s1 = ComponentReference.printComponentRefStr(name);
         if Util.isSome(arrCref) then s3 = " \tarrCref:"+ComponentReference.printComponentRefStr(Util.getOption(arrCref)); else s3="\tno arrCref"; end if;
         sProt = if isProtected then " protected " else "";
         sRes = if hideResult then " hideResult " else "";
-        s = "index: "+intString(i)+": "+s1+" (no alias) "+sProt+sRes+" initial: "+ExpressionDump.printOptExpStr(init) + s3 + " index:("+printVarIndx(variable_index)+")" +" [" + stringDelimitList(numArrayElement,",")+"] ";
+        s = "index: "+intString(i)+": "+s1+" (no alias) "+sProt+sRes+"valueType: "+DaeTypeToStr(type_)+" initial: "+ExpressionDump.printOptExpStr(init) + s3 + " index:("+printVarIndx(variable_index)+")" +" [" + stringDelimitList(numArrayElement,",")+"] ";
      then s;
-    case (SimCodeVar.SIMVAR(name= name, aliasvar = SimCodeVar.ALIAS(varName = name2), index = i, initialValue=init, arrayCref=arrCref, variable_index=variable_index, numArrayElement=numArrayElement, isProtected=isProtected, hideResult=hideResult))
+    case (SimCodeVar.SIMVAR(name= name, aliasvar = SimCodeVar.ALIAS(varName = name2), index = i, initialValue=init, arrayCref=arrCref, variable_index=variable_index, numArrayElement=numArrayElement, isProtected=isProtected, hideResult=hideResult, type_=type_))
     equation
         s1 = ComponentReference.printComponentRefStr(name);
         s2 = ComponentReference.printComponentRefStr(name2);
         sProt = if isProtected then " protected "else "";
         sRes = if hideResult then " hideResult " else "";
         if Util.isSome(arrCref) then s3 = " \tarrCref:"+ComponentReference.printComponentRefStr(Util.getOption(arrCref)); else s3="\tno arrCref"; end if;
-        s = "index: "+intString(i)+": "+s1+" (alias: "+s2+") "+sProt+sRes+" initial: "+ExpressionDump.printOptExpStr(init) + s3 + " index:("+printVarIndx(variable_index)+")" +" [" + stringDelimitList(numArrayElement,",")+"] ";
+        s = "index: "+intString(i)+": "+s1+" (alias: "+s2+") "+sProt+sRes+"valueType: "+DaeTypeToStr(type_)+" initial: "+ExpressionDump.printOptExpStr(init) + s3 + " index:("+printVarIndx(variable_index)+")" +" [" + stringDelimitList(numArrayElement,",")+"] ";
     then s;
-    case (SimCodeVar.SIMVAR(name= name, aliasvar = SimCodeVar.NEGATEDALIAS(varName = name2), index = i, initialValue=init, arrayCref=arrCref,variable_index=variable_index, numArrayElement=numArrayElement, isProtected=isProtected, hideResult=hideResult))
+    case (SimCodeVar.SIMVAR(name= name, aliasvar = SimCodeVar.NEGATEDALIAS(varName = name2), index = i, initialValue=init, arrayCref=arrCref,variable_index=variable_index, numArrayElement=numArrayElement, isProtected=isProtected, hideResult=hideResult, type_=type_))
     equation
         s1 = ComponentReference.printComponentRefStr(name);
         s2 = ComponentReference.printComponentRefStr(name2);
         sProt = if isProtected then " protected "else "";
         sRes = if hideResult then " hideResult " else "";
         if Util.isSome(arrCref) then s3 = " \tarrCref:"+ComponentReference.printComponentRefStr(Util.getOption(arrCref)); else s3="\tno arrCref"; end if;
-        s = "index: "+intString(i)+": "+s1+" (negated alias: "+s2+") "+sProt+sRes+" initial: "+ExpressionDump.printOptExpStr(init) + s3 + " index:("+printVarIndx(variable_index)+")" +" [" + stringDelimitList(numArrayElement,",")+"] ";
+        s = "index: "+intString(i)+": "+s1+" (negated alias: "+s2+") "+sProt+sRes+"valueType: "+DaeTypeToStr(type_)+" initial: "+ExpressionDump.printOptExpStr(init) + s3 + " index:("+printVarIndx(variable_index)+")" +" [" + stringDelimitList(numArrayElement,",")+"] ";
      then s;
    end match;
 end simVarString;
 
-
+public function DaeTypeToStr
+  input DAE.Type type_;
+  output String s;
+algorithm
+  s := match(type_)
+    case  DAE.T_INTEGER() then "integer";
+    case  DAE.T_REAL() then "real";
+    case  DAE.T_STRING() then "string";
+    case  DAE.T_BOOL() then "boolean";
+    case  DAE.T_ENUMERATION() then "enumeration";
+    else then "others";
+    end match;
+end DaeTypeToStr;
+ 
 protected function printVarIndx
   input Option<Integer> i;
   output String s;
@@ -7246,6 +7260,20 @@ algorithm
   end if;
 end dumpVarLst;
 
+public function dumpVarLstFile"dumps a list of SimVars to a file."
+  input list<SimCodeVar.SimVar> varLst;
+  input String header;
+  input File.File file;
+protected
+  SimCodeVar.SimVar var;
+algorithm
+  if not listEmpty(varLst) then
+     File.write(file,"//"+header+"\n//----------------------\n");
+  for var in varLst loop
+     File.write(file, "type: " + header +" " + simVarString(var)+"\n");
+  end for;
+  end if;
+end dumpVarLstFile;
 
 public function printVarLstCrefs
     input list<SimCodeVar.SimVar> inVars;
@@ -7336,6 +7364,58 @@ algorithm
   dumpFunctions(functions);
 end dumpModelInfo;
 
+public function dumpModelInfoToFile"dumps the SimVars to stdout
+author:Waurich TUD 2014-05"
+  input SimCode.ModelInfo modelInfo;
+protected
+  Integer nsv,nalgv;
+  SimCode.VarInfo varInfo;
+  SimCodeVar.SimVars simVars;
+  list<SimCodeVar.SimVar> stateVars;
+  list<SimCodeVar.SimVar> derivativeVars;
+  list<SimCodeVar.SimVar> algVars;
+  list<SimCodeVar.SimVar> discreteAlgVars;
+  list<SimCodeVar.SimVar> intAlgVars;
+  list<SimCodeVar.SimVar> boolAlgVars;
+  list<SimCodeVar.SimVar> aliasVars;
+  list<SimCodeVar.SimVar> intAliasVars;
+  list<SimCodeVar.SimVar> boolAliasVars;
+  list<SimCodeVar.SimVar> paramVars;
+  list<SimCodeVar.SimVar> boolParamVars;
+  list<SimCodeVar.SimVar> intParamVars;
+  list<SimCodeVar.SimVar> stringParamVars;
+  list<SimCodeVar.SimVar> extObjVars;
+  list<SimCodeVar.SimVar> constVars;
+  list<SimCodeVar.SimVar> intConstVars;
+  list<SimCodeVar.SimVar> stringConstVars;
+  list<SimCodeFunction.Function> functions;
+  File.File file = File.File();
+algorithm
+  File.open(file,Absyn.pathString(modelInfo.name)+"_variables.txt",File.Mode.Write);
+  SimCode.MODELINFO(vars=simVars, varInfo=varInfo, functions=functions) := modelInfo;
+  SimCodeVar.SIMVARS(stateVars=stateVars,derivativeVars=derivativeVars,algVars=algVars,boolAlgVars=boolAlgVars,intAlgVars=intAlgVars,discreteAlgVars=discreteAlgVars,aliasVars=aliasVars,intAliasVars=intAliasVars,boolAliasVars=boolAliasVars,
+  paramVars=paramVars,intParamVars=intParamVars,boolParamVars=boolParamVars, stringParamVars=stringParamVars, extObjVars=extObjVars,constVars=constVars,intConstVars=intConstVars,stringConstVars=stringConstVars) := simVars;
+  SimCode.VARINFO(numStateVars=nsv,numAlgVars=nalgv) := varInfo;
+  dumpVarLstFile(stateVars,"stateVars ("+intString(nsv)+")", file);
+  dumpVarLstFile(derivativeVars,"derivativeVars", file);
+  dumpVarLstFile(algVars,"algVars ("+intString(nalgv)+")", file);
+  dumpVarLstFile(discreteAlgVars,"discreteAlgVars", file);
+  dumpVarLstFile(intAlgVars,"intAlgVars", file);
+  dumpVarLstFile(boolAlgVars,"boolAlgVars", file);
+  dumpVarLstFile(aliasVars,"aliasVars", file);
+  dumpVarLstFile(intAliasVars,"intAliasVars", file);
+  dumpVarLstFile(boolAliasVars,"boolAliasVars", file);
+  dumpVarLstFile(paramVars,"paramVars", file);
+  dumpVarLstFile(intParamVars,"intParamVars", file);
+  dumpVarLstFile(boolParamVars,"boolParamVars", file);
+  dumpVarLstFile(stringParamVars,"stringParamVars", file);
+  dumpVarLstFile(extObjVars,"extObjVars", file);
+  dumpVarLstFile(constVars,"constVars", file);
+  dumpVarLstFile(intConstVars,"intConstVars", file);
+  dumpVarLstFile(stringConstVars,"stringConstVars", file);
+end dumpModelInfoToFile;
+
+
 protected function dumpFunctions
   input list<SimCodeFunction.Function> functions;
 algorithm
@@ -7523,7 +7603,6 @@ algorithm
         s = s +dumpWhenOps(whenStmtLst);
         if isSome(elseWhen) then
           s = s + " ELSEWHEN: ";
-          dumpSimEqSystem(Util.getOption(elseWhen));
           s = s + simEqSystemString(Util.getOption(elseWhen));
         end if;
       then s;
@@ -7843,6 +7922,7 @@ algorithm
   List.map_0(jacObs,dumpJacobianMatrix);
   print("\nmodelInfo: \n" + UNDERLINE + "\n");
   dumpModelInfo(simCode.modelInfo);
+  dumpModelInfoToFile(simCode.modelInfo);
   dumpSimCodeDAEmodeDataString(simCode.daeModeData);
 end dumpSimCodeDebug;
 
