#!/bin/bash
#
# Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
# See AUTHORS.txt
# All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0
#
# This file is part of Dynawo, an hybrid C++/Modelica open source time domain simulation tool for power systems.

if [ -z "$DYNAWO_INSTALL_DIR" ]; then
  echo "DYNAWO_INSTALL_DIR environment variable should be set."
  exit 1
fi
if [ -z "$DYNAWO_ADEPT_INSTALL_DIR" ]; then
  echo "DYNAWO_ADEPT_INSTALL_DIR environment variable should be set."
  exit 1
fi
if [ -z "$DYNAWO_INSTALL_OPENMODELICA" ]; then
  echo "DYNAWO_INSTALL_OPENMODELICA environment variable should be set."
  exit 1
fi
if [ -z "$DYNAWO_OPENMODELICA_VERSION" ]; then
  echo "DYNAWO_OPENMODELICA_VERSION environment variable should be set."
  exit 1
fi

# Setting install path environment variables
COMPILER_CMD=@CMAKE_CXX_COMPILER@
DYNAWO_INCLUDE_DIR=${DYNAWO_INSTALL_DIR}/include
DYNAWO_LIB_DIR=${DYNAWO_INSTALL_DIR}/lib

if [ "`uname`" = "Linux" ]; then
  DYNAWO_SHARED_LIBRARY_SUFFIX="so"
elif [ "`uname`" = "Darwin" ]; then
  DYNAWO_SHARED_LIBRARY_SUFFIX="dylib"
else
  echo "OS `uname` not supported."
  exit 1
fi

LIBRARY_TYPE=@LIBRARY_TYPE@
CXX11_ENABLED=@CXX11_ENABLED@
WITH_ADEPT=@USE_ADEPT@
ADEPT_INCLUDE_DIR=${DYNAWO_ADEPT_INSTALL_DIR}/include
if [ "$LIBRARY_TYPE" = "SHARED" ]; then
  ADEPT_LIBRARY=${DYNAWO_ADEPT_INSTALL_DIR}/lib/libadept.$DYNAWO_SHARED_LIBRARY_SUFFIX
elif [ "$LIBRARY_TYPE" = "STATIC" ]; then
  ADEPT_LIBRARY=${DYNAWO_ADEPT_INSTALL_DIR}/lib/libadept.a
else
  echo "Error invalid LIBRARY_TYPE."
  exit 1
fi

SUNDIALS_LIBRARIES="@SUNDIALS_KINSOL_LIBRARY@ @SUNDIALS_NVECSERIAL_LIBRARY@ @SUNDIALS_IDA_LIBRARY@ @SUNDIALS_SUNLINSOLKLU_LIBRARY@ @SUNDIALS_SUNMATRIXSPARSE_LIBRARY@"
SUITESPARSE_LIBRARIES="@KLU_LIBRARY@ @AMD_LIBRARY@ @COLAMD_LIBRARY@ @BTF_LIBRARY@ @SUITESPARSE_CONFIG_LIBRARY@"
NICSLU_FOUND="@NICSLU_FOUND@"

if [ "$NICSLU_FOUND" = "TRUE" ]; then
  SUNDIALS_NICSLU_LIBRARY="@SUNDIALS_SUNLINSOLNICSLU_LIBRARY@"
  NICSLU_LIBRARIES="@NICSLU_LIBRARY@ @NICSLU_UTIL@"
else
  SUNDIALS_NICSLU_LIBRARY=""
  NICSLU_LIBRARIES=""
fi

BOOST_INCLUDE_DIR_OPTION=""
BOOST_LIB_DIR_OPTION=""
if [ ! -z "$DYNAWO_BOOST_HOME" ]; then
  BOOST_INCLUDE_DIR=${DYNAWO_BOOST_HOME}/include
  BOOST_LIB_DIR=${DYNAWO_BOOST_HOME}/lib
  BOOST_INCLUDE_DIR_OPTION=-I$BOOST_INCLUDE_DIR
  BOOST_LIB_DIR_OPTION=-L$BOOST_LIB_DIR
  if [ "`uname`" = "Darwin" ]; then
    BOOST_LIB_DIR_OPTION="$BOOST_LIB_DIR_OPTION -rpath $BOOST_LIB_DIR"
  fi
fi

OMC_INCLUDE_DIR=${DYNAWO_INSTALL_OPENMODELICA}/include/omc/c
DEBUG="false"

while (($#)); do
  case $1 in
    --model-name=*)
      MODEL_NAME=`echo $1 | sed -e 's/--model-name=//g'`
      ;;
    --directory=*)
      DIRECTORY=`echo $1 | sed -e 's/--directory=//g'`
      ;;
    --lib-name=*)
      LIB_NAME=`echo $1 | sed -e 's/--lib-name=//g'`
      ;;
    --debug)
      DEBUG="true"
      ;;
    *)
      break
      ;;
  esac
  shift
done

if [[ -z "$MODEL_NAME" ]]; then
  echo "Need a model name to compile"
  exit 1
fi
if [[ -z "$DIRECTORY" ]]; then
  echo "Need a directory to compile"
  exit 1
fi

# Flags for compilation
FLAGS="@CMAKE_CXX_FLAGS@"
INCLUDE_FLAGS="-I$DYNAWO_INCLUDE_DIR -I$OMC_INCLUDE_DIR $BOOST_INCLUDE_DIR_OPTION $DYNAWO_ADDITIONAL_INCLUDE_FOR_PREASSEMBLED"
LIB_FLAGS="-L$DYNAWO_LIB_DIR $BOOST_LIB_DIR_OPTION -ldynawo_API_PAR -ldynawo_ModelManager -ldynawo_ModelerCommon \
-ldynawo_DataInterface -ldynawo_SolverKINSOL -ldynawo_SolverSubModel -ldynawo_SolverCommon -ldynawo_Common $DYNAWO_ADDITIONAL_LIBRARY_FOR_PREASSEMBLED \
-lboost_serialization -lboost_log -lboost_chrono -lboost_date_time -lboost_regex -lboost_atomic -lboost_filesystem -pthread -lboost_thread -lboost_system \
$SUNDIALS_LIBRARIES $SUITESPARSE_LIBRARIES $SUNDIALS_NICSLU_LIBRARY $NICSLU_LIBRARIES"

if [ "$LIBRARY_TYPE" = "SHARED" ]; then
  LIB_FLAGS="$LIB_FLAGS -ldynawo_Util"
fi

if [ "`uname`" = "Darwin" ]; then
  if [ "$LIBRARY_TYPE" = "STATIC" ]; then
    LIB_FLAGS="$LIB_FLAGS -flat_namespace -undefined warning"
  fi
  SUNDIALS_KINSOL_LIBRARY=@SUNDIALS_KINSOL_LIBRARY@
  SUNDIALS_LIB_PATH=$(dirname $SUNDIALS_KINSOL_LIBRARY)
  KLU_LIBRARY=@KLU_LIBRARY@
  SUITESPARSE_LIB_PATH=$(dirname $KLU_LIBRARY)
  LIB_FLAGS="$LIB_FLAGS -rpath $SUNDIALS_LIB_PATH"
  LIB_FLAGS="$LIB_FLAGS -rpath $SUITESPARSE_LIB_PATH"
  LIB_FLAGS="$LIB_FLAGS -rpath $DYNAWO_LIB_DIR"
  LIB_FLAGS="$LIB_FLAGS -rpath $DYNAWO_ADEPT_INSTALL_DIR/lib"
  LIB_FLAGS="$LIB_FLAGS -install_name @rpath/$LIB_NAME"
fi

if [ "$WITH_ADEPT" = "YES" ]; then
  FLAGS="$FLAGS -D_ADEPT_"
  INCLUDE_FLAGS="$INCLUDE_FLAGS -I$ADEPT_INCLUDE_DIR"
  LIB_FLAGS="$LIB_FLAGS $ADEPT_LIBRARY"
fi

if [ "$DEBUG" = "true" ]; then
  FLAGS="$FLAGS -g -O0 -fPIC -D_OMC_${DYNAWO_OPENMODELICA_VERSION} -D_DEBUG_"
else
  FLAGS="$FLAGS -O3 -fPIC -D_OMC_${DYNAWO_OPENMODELICA_VERSION}"
fi

if [ "$(echo "$CXX11_ENABLED" | tr '[:upper:]' '[:lower:]')" = "no" -o "$(echo "$CXX11_ENABLED" | tr '[:upper:]' '[:lower:]')" = "false" -o "$(echo "$CXX11_ENABLED" | tr '[:upper:]' '[:lower:]')" = "off" ]; then
  FLAGS="$FLAGS -std=c++98"
fi

# definition of variables from parameters
CPP_FILE="$DIRECTORY"/"$MODEL_NAME".cpp
CPP_INIT_FILE="$DIRECTORY"/"$MODEL_NAME"_Init.cpp
CPP_DYN_FILE="$DIRECTORY"/"$MODEL_NAME"_Dyn.cpp
EXTERN_DYN_FILE="$DIRECTORY"/"$MODEL_NAME"_Dyn_external.cpp
EXTERN_INIT_FILE="$DIRECTORY"/"$MODEL_NAME"_Init_external.cpp

O_FILE="$DIRECTORY"/"$MODEL_NAME".o
O_INIT_FILE="$DIRECTORY"/"$MODEL_NAME"_Init.o
O_DYN_FILE="$DIRECTORY"/"$MODEL_NAME"_Dyn.o
O_EXTERN_DYN_FILE="$DIRECTORY"/"$MODEL_NAME"_Dyn_external.o
O_EXTERN_INIT_FILE="$DIRECTORY"/"$MODEL_NAME"_Init_external.o

SO_FILE="$DIRECTORY"/"$LIB_NAME"

# Compilation the CPP file
echo "$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $CPP_FILE -o $O_FILE"
$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $CPP_FILE -o $O_FILE 2>&1
if [[ ! -f "$O_FILE" ]]; then
  echo "Compilation of $CPP_FILE failed"
  exit 1
fi

# Compilation of the DYN_CPP file
echo "$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $CPP_DYN_FILE -o $O_DYN_FILE"
$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $CPP_DYN_FILE -o $O_DYN_FILE 2>&1
if [[ ! -f "$O_DYN_FILE" ]]; then
  echo "Compilation of $CPP_DYN_FILE failed"
  exit 1
fi

# Compilation of the DYN_EXTERN function file
echo "$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $EXTERN_DYN_FILE -o $O_EXTERN_DYN_FILE"
$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $EXTERN_DYN_FILE -o $O_EXTERN_DYN_FILE 2>&1
if [[ ! -f "$O_EXTERN_DYN_FILE" ]]; then
  echo "Compilation of $EXTERN_DYN_FILE failed"
  exit 1
fi

# If INIT_cpp file exists
if [[ -f "$CPP_INIT_FILE" ]]; then
  # Compilation of the INIT_CPP file
  echo "$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $CPP_INIT_FILE -o $O_INIT_FILE"
  $COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $CPP_INIT_FILE -o $O_INIT_FILE 2>&1
  if [[ ! -f "$O_INIT_FILE" ]]; then
    echo "Compilation of $CPP_INIT_FILE failed"
    exit 1
  fi

  # Compilation of INIT_EXTERN function file
  echo "$COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $EXTERN_INIT_FILE -o $O_EXTERN_INIT_FILE"
  $COMPILER_CMD $FLAGS  $INCLUDE_FLAGS -c $EXTERN_INIT_FILE -o $O_EXTERN_INIT_FILE 2>&1
  if [[ ! -f "$O_EXTERN_INIT_FILE" ]]; then
    echo "Compilation of $EXTERN_DYN_FILE failed"
    exit 1
  fi

  # Creation of the library
  echo "$COMPILER_CMD $O_FILE $O_DYN_FILE $O_INIT_FILE $O_EXTERN_DYN_FILE $O_EXTERN_INIT_FILE $FLAGS  $LIB_FLAGS -o $SO_FILE"
  $COMPILER_CMD $O_FILE $O_DYN_FILE $O_INIT_FILE $O_EXTERN_DYN_FILE $O_EXTERN_INIT_FILE -shared $FLAGS $LIB_FLAGS -o $SO_FILE 2>&1
else
  # Creation of the library
  echo "$COMPILER_CMD $O_FILE $O_DYN_FILE $O_EXTERN_DYN_FILE $FLAGS  $LIB_FLAGS -o $SO_FILE"
  $COMPILER_CMD $O_FILE $O_DYN_FILE $O_EXTERN_DYN_FILE -shared $FLAGS $LIB_FLAGS -o $SO_FILE 2>&1
fi
