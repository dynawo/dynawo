within Dynawo.Electrical.Sources;

/*
* Copyright (c) 2015-2019, RTE (http://www.rte-france.com)
* See AUTHORS.txt
* All rights reserved.
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, you can obtain one at http://mozilla.org/MPL/2.0/.
* SPDX-License-Identifier: MPL-2.0
*
* This file is part of Dynawo, an hybrid C++/Modelica open source time domain simulation tool for power systems.
*/

model Converter "Converter Model for Grid Forming and Grid Following applications"

/*
  Equivalent circuit and conventions:
                       __________
IdcSourcePu     IdcPu |          |iConvPu                           iPccPu
-------->-------->----|          |-->-----(Rfilter,Lfilter)---------->--(Rtransformer,Ltransformer)---(terminal)
              |       |          |                                |
VdcSourcePu (Cdc)     |  DC/AC   |  uConvPu         uFilterPu (Cfilter)                      uPccPu
              |       |          |                                |
              |       |          |                                |
----------------------|__________|---------------------------------------------------------------------

*/


  import Modelica.Math;
  import Modelica.ComplexMath;
  import Dynawo.Types;
  import Dynawo.Connectors;
  import Dynawo.Electrical.SystemBase;

  Connectors.ImPin IdcSourcePu(value(start = IdcSource0Pu)) "DC Current generated by the DC current source in p.u (base UNom, SNom)";
  Connectors.ImPin udConvRefPu(value(start = UdConv0Pu)) "d-axis modulated voltage reference in p.u (base UNom)";
  Connectors.ImPin uqConvRefPu(value(start = UqConv0Pu)) "q-axis modulated voltage reference in p.u (base UNom)";
  Connectors.ImPin UdcSourceRefPu(value(start = UdcSource0Pu)) "DC voltage reference in p.u (base UNom)";
  Connectors.ImPin theta(value(start = Theta0)) "Phase shift between the converter's rotating frame and the grid rotating frame";
  Connectors.ImPin omegaPu(value(start = SystemBase.omegaRef0Pu)) "Converter angular frequency in p.u (base OmegaNom)";
  Connectors.ACPower terminal (V (re (start = u0Pu.re), im (start = u0Pu.im)), i (re (start = i0Pu.re), im (start = i0Pu.im))) "Connector used to connect the converter to the grid";

  parameter Types.PerUnit Rfilter "Filter resistance in p.u (base UNom, SNom)";
  parameter Types.PerUnit Lfilter "Filter inductance in p.u (base UNom, SNom)";
  parameter Types.PerUnit Cfilter "Filter capacitance in p.u (base UNom, SNom)";
  parameter Types.PerUnit Rtransformer "Transformer resistance in p.u (base UNom, SNom)";
  parameter Types.PerUnit Ltransformer "Transformer inductance in p.u (base UNom, SNom)";
  parameter Types.PerUnit Cdc "DC capacitance in p.u (base UNom, SNom)";
  parameter Types.ApparentPowerModule SNom "Apparent power module reference for the converter";

  Types.PerUnit udConvPu(start = UdConv0Pu) "d-axis modulated voltage created by the converter in p.u (base UNom)";
  Types.PerUnit udFilterPu(start = UdFilter0Pu) "d-axis voltage at the converter's capacitor in p.u (base UNom)";
  Types.PerUnit udPccPu(start = UdPcc0Pu) "d-axis voltage at the PCC in p.u (base UNom)";
  Types.PerUnit idConvPu(start = IdConv0Pu) "d-axis current created by the converter in p.u (base UNom, SNom) (generator convention)";
  Types.PerUnit idPccPu(start = IdPcc0Pu) "d-axis current at the PCC in p.u (base UNom, SNom) (generator convention)";
  Types.PerUnit uqConvPu(start = UqConv0Pu) "q-axis modulated voltage created by the converter in p.u (base UNom)";
  Types.PerUnit uqFilterPu(start = 0) "q-axis voltage at the converter's capacitor in p.u (base UNom)";
  Types.PerUnit uqPccPu(start = UqPcc0Pu) "q-axis voltage at the PCC in p.u (base UNom)";
  Types.PerUnit iqConvPu(start = IqConv0Pu) "q-axis current created by the converter in p.u (base UNom, SNom) (generator convention)";
  Types.PerUnit iqPccPu(start = IqPcc0Pu) "q-axis current at the PCC in p.u (base UNom, SNom) (generator convention)";
  Types.PerUnit UdcSourcePu(start = UdcSource0Pu) "DC Voltage in p.u (base UNom)";
  Types.PerUnit IdcPu(start = IdcSource0Pu) "DC Current entering the converter in p.u (base UNom, SNom)";
  Types.PerUnit IConvPu(start = sqrt(IdConv0Pu * IdConv0Pu + IqConv0Pu * IqConv0Pu)) "current created by the converter in p.u (base UNom, SNom) (generator convention)";

protected

  parameter Types.ComplexPerUnit i0Pu "Start value of the complex current at terminal in p.u (base UNom, SnRef) (receptor convention)";
  parameter Types.ComplexPerUnit u0Pu "Start value of the complex voltage at terminal in p.u (base UNom)";
  parameter Types.Angle Theta0 "Start value of the phase shift between the converter's rotating frame and the grid rotating frame";
  parameter Types.PerUnit UdConv0Pu "Start value of the d-axis modulated voltage reference created by the converter in p.u (base UNom)";
  parameter Types.PerUnit UdFilter0Pu "Start value of the d-axis voltage at the capacitor in p.u (base UNom)";
  parameter Types.PerUnit UdPcc0Pu "Start value of the d-axis voltage at the PCC in p.u (base UNom)";
  parameter Types.PerUnit IdConv0Pu "Start value of the d-axis current created by the converter in p.u (base UNom, SNom) (generator convention)";
  parameter Types.PerUnit IdPcc0Pu "Start value of the d-axis current at the PCC in p.u (base UNom, SNom) (generator convention)";
  parameter Types.PerUnit UqConv0Pu "Start value of the q-axis modulated voltage reference created by the converter in p.u (base UNom)";
  parameter Types.PerUnit UqPcc0Pu "Start value of the q-axis voltage at the PCC in p.u (base UNom)";
  parameter Types.PerUnit IqConv0Pu "Start value of the q-axis current created by the converter in p.u (base UNom, SNom) (generator convention)";
  parameter Types.PerUnit IqPcc0Pu "Start value of the q-axis current at the PCC in p.u (base UNom, SNom) (generator convention)";
  parameter Types.PerUnit IdcSource0Pu "Start value of the DC source current in p.u (base SnRefConverter)";
  parameter Types.PerUnit UdcSource0Pu "Start value of the DC voltage in p.u (base Unom)";

  equation

  /* DQ reference frame change from network reference to converter reference and p.u base change */
  [udPccPu; uqPccPu] = [cos(theta.value), sin(theta.value); -sin(theta.value), cos(theta.value)] * [terminal.V.re; terminal.V.im];
  [idPccPu; iqPccPu] = - [cos(theta.value), sin(theta.value); -sin(theta.value), cos(theta.value)] * [terminal.i.re; terminal.i.im] * SystemBase.SnRef / SNom;

  /* RL Transformer */
  Ltransformer / SystemBase.omegaNom * der(idPccPu) = udFilterPu - Rtransformer * idPccPu + omegaPu.value * Ltransformer * iqPccPu - udPccPu;
  Ltransformer / SystemBase.omegaNom * der(iqPccPu) = uqFilterPu - Rtransformer * iqPccPu - omegaPu.value * Ltransformer * idPccPu - uqPccPu;

  /* RLC Filter */
  Lfilter / SystemBase.omegaNom * der(idConvPu) = udConvPu - Rfilter * idConvPu + omegaPu.value * Lfilter * iqConvPu - udFilterPu;
  Lfilter / SystemBase.omegaNom * der(iqConvPu) = uqConvPu - Rfilter * iqConvPu - omegaPu.value * Lfilter * idConvPu - uqFilterPu;
  Cfilter / SystemBase.omegaNom * der(udFilterPu) = idConvPu + omegaPu.value * Cfilter * uqFilterPu - idPccPu;
  Cfilter / SystemBase.omegaNom * der(uqFilterPu) = iqConvPu - omegaPu.value * Cfilter * udFilterPu - iqPccPu;
  IConvPu = sqrt (idConvPu * idConvPu + iqConvPu * iqConvPu);

  /* DC Side */
  Cdc * der(UdcSourcePu) = IdcSourcePu.value - IdcPu;

  /* Power Conservation */
  udConvPu * idConvPu + uqConvPu * iqConvPu = UdcSourcePu * IdcPu;

  /* AC Voltage Source */
  udConvPu=udConvRefPu.value*UdcSourcePu/UdcSourceRefPu.value;
  uqConvPu=uqConvRefPu.value*UdcSourcePu/UdcSourceRefPu.value;

annotation(preferredView = "text");

end Converter;

