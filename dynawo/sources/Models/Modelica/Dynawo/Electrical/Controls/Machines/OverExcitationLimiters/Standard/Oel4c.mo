within Dynawo.Electrical.Controls.Machines.OverExcitationLimiters.Standard;

/*
* Copyright (c) 2024, RTE (http://www.rte-france.com)
* See AUTHORS.txt
* All rights reserved.
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, you can obtain one at http://mozilla.org/MPL/2.0/.
* SPDX-License-Identifier: MPL-2.0
*
* This file is part of Dynawo, an hybrid C++/Modelica open source suite
* of simulation tools for power systems.
*/

model Oel4c "IEEE (2016) overexcitation limiter type OEL4C model"

  //Regulation parameters
  parameter Types.PerUnit Ki "OEL integral gain";
  parameter Types.PerUnit Kp "OEL proportional gain";
  parameter Types.Time tDelay "OEL integral time constant in s";
  parameter Types.VoltageModulePu VMinPu "OEL minimum output in pu (base UNom)";

  //Input variables
  Modelica.Blocks.Interfaces.RealInput QGenPu(start = QGen0Pu) "Reactive power generated by the synchronous machine in pu (base SnRef) (generator convention)" annotation(
    Placement(visible = true, transformation(origin = {-180, -60}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput QRefPu(start = QGen0Pu) "Reference reactive power in pu (base SnRef) (generator convention)" annotation(
    Placement(visible = true, transformation(origin = {-180, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));

  //Output variable
  Modelica.Blocks.Interfaces.RealOutput UOelPu(start = 0) "Overexcitation limitation output voltage in pu (base UNom)" annotation(
    Placement(visible = true, transformation(origin = {150, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

  Modelica.Blocks.Math.Feedback feedback1 annotation(
    Placement(visible = true, transformation(origin = {-120, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Logical.LessThreshold lessThreshold annotation(
    Placement(visible = true, transformation(origin = {-70, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Logical.Timer timer annotation(
    Placement(visible = true, transformation(origin = {-30, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Dynawo.NonElectrical.Blocks.Continuous.LimitedPI limitedPI(Ki = Ki, Kp = Kp, YMax = 0, YMin = VMinPu) annotation(
    Placement(visible = true, transformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Logical.LessThreshold lessThreshold1(threshold = tDelay) annotation(
    Placement(visible = true, transformation(origin = {10, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Logical.Switch switch annotation(
    Placement(visible = true, transformation(origin = {70, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant const(k = 0) annotation(
    Placement(visible = true, transformation(origin = {10, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

  //Generator initial parameter
  parameter Types.ReactivePowerPu QGen0Pu "Initial reactive power in pu (base SnRef) (generator convention)";

equation
  connect(QRefPu, feedback1.u1) annotation(
    Line(points = {{-180, 0}, {-128, 0}}, color = {0, 0, 127}));
  connect(QGenPu, feedback1.u2) annotation(
    Line(points = {{-180, -60}, {-120, -60}, {-120, -8}}, color = {0, 0, 127}));
  connect(feedback1.y, lessThreshold.u) annotation(
    Line(points = {{-111, 0}, {-83, 0}}, color = {0, 0, 127}));
  connect(lessThreshold.y, timer.u) annotation(
    Line(points = {{-59, 0}, {-42, 0}}, color = {255, 0, 255}));
  connect(timer.y, lessThreshold1.u) annotation(
    Line(points = {{-19, 0}, {-3, 0}}, color = {0, 0, 127}));
  connect(feedback1.y, switch.u3) annotation(
    Line(points = {{-111, 0}, {-100, 0}, {-100, -40}, {40, -40}, {40, -8}, {58, -8}}, color = {0, 0, 127}));
  connect(const.y, switch.u1) annotation(
    Line(points = {{21, 40}, {40, 40}, {40, 8}, {58, 8}}, color = {0, 0, 127}));
  connect(switch.y, limitedPI.u) annotation(
    Line(points = {{81, 0}, {97, 0}}, color = {0, 0, 127}));
  connect(limitedPI.y, UOelPu) annotation(
    Line(points = {{121, 0}, {149, 0}}, color = {0, 0, 127}));
  connect(lessThreshold1.y, switch.u2) annotation(
    Line(points = {{21, 0}, {58, 0}}, color = {255, 0, 255}));

  annotation(
    preferredView = "diagram",
    Diagram(coordinateSystem(extent = {{-160, -100}, {140, 100}})));
end Oel4c;
